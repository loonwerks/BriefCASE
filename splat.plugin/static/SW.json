[
  {
    "name": "SW",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "Data_Model",
        "Base_Types",
        "CASE_Properties",
        "CASE_Model_Transformations"
      ],
      "components": [
        {
          "name": "SW::Coordinate",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "SW::Coordinate.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "latitude",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "longitude",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "altitude",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Integer"
            }
          ]
        },
        {
          "name": "SW::Map",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "kind": "PropertyAssociation",
              "value": "Array"
            },
            {
              "name": "Data_Model::Base_Type",
              "kind": "PropertyAssociation",
              "value": [
                "SW::Coordinate.Impl"
              ]
            },
            {
              "name": "Data_Model::Dimension",
              "kind": "PropertyAssociation",
              "value": [
                "4"
              ]
            }
          ]
        },
        {
          "name": "SW::MapArray",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "kind": "PropertyAssociation",
              "value": "Array"
            },
            {
              "name": "Data_Model::Base_Type",
              "kind": "PropertyAssociation",
              "value": [
                "SW::Map"
              ]
            },
            {
              "name": "Data_Model::Dimension",
              "kind": "PropertyAssociation",
              "value": [
                "5"
              ]
            }
          ]
        },
        {
          "name": "SW::FlightPattern",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "kind": "PropertyAssociation",
              "value": "Enum"
            },
            {
              "name": "Data_Model::Enumerators",
              "kind": "PropertyAssociation",
              "value": [
                "ZigZag",
                "StraightLine",
                "Perimeter"
              ]
            }
          ]
        },
        {
          "name": "SW::FlightPattern.Impl",
          "kind": "ComponentImplementation",
          "category": "data"
        },
        {
          "name": "SW::Command",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "SW::Command.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "map",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "SW::Map"
            },
            {
              "name": "pattern",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "SW::FlightPattern"
            }
          ]
        },
        {
          "name": "SW::RF_Msg",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "CASE_Model_Transformations::CASE_RF_Msg",
            "kind": "ComponentType",
            "category": "data"
          }
        },
        {
          "name": "SW::RF_Msg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "extends": {
            "name": "CASE_Model_Transformations::CASE_RF_Msg.Impl",
            "kind": "ComponentImplementation",
            "category": "data",
            "subcomponents": [
              {
                "name": "header",
                "kind": "Subcomponent",
                "category": "data",
                "classifier": "CASE_Model_Transformations::CASE_MsgHeader.Impl"
              },
              {
                "name": "payload",
                "kind": "Subcomponent",
                "category": "data",
                "classifier": "null"
              }
            ]
          },
          "subcomponents": [
            {
              "name": "payload",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "SW::Command.Impl"
            }
          ]
        },
        {
          "name": "SW::Mission",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "kind": "PropertyAssociation",
              "value": "Array"
            },
            {
              "name": "Data_Model::Base_Type",
              "kind": "PropertyAssociation",
              "value": [
                "SW::Coordinate.Impl"
              ]
            },
            {
              "name": "Data_Model::Dimension",
              "kind": "PropertyAssociation",
              "value": [
                "10"
              ]
            }
          ]
        },
        {
          "name": "SW::MissionWindow",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "kind": "PropertyAssociation",
              "value": "Array"
            },
            {
              "name": "Data_Model::Base_Type",
              "kind": "PropertyAssociation",
              "value": [
                "SW::Coordinate.Impl"
              ]
            },
            {
              "name": "Data_Model::Dimension",
              "kind": "PropertyAssociation",
              "value": [
                "4"
              ]
            }
          ]
        },
        {
          "name": "SW::WifiDriver",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "gimbal_command",
              "kind": "EventDataPort",
              "classifier": "null",
              "direction": "in"
            },
            {
              "name": "send_data",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_WIFI_Msg.Impl",
              "direction": "out"
            },
            {
              "name": "recv_data",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_WIFI_Msg.Impl",
              "direction": "in"
            }
          ]
        },
        {
          "name": "SW::WifiDriver.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "SW::RadioDriver",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "recv_data",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_RF_Msg.Impl",
              "direction": "in"
            },
            {
              "name": "send_data",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_RF_Msg.Impl",
              "direction": "out"
            },
            {
              "name": "mission_command",
              "kind": "EventDataPort",
              "classifier": "SW::RF_Msg.Impl",
              "direction": "out"
            },
            {
              "name": "status",
              "kind": "EventDataPort",
              "classifier": "SW::Coordinate.Impl",
              "direction": "in"
            }
          ],
          "properties": [
            {
              "name": "CASE_Properties::COMP_TYPE",
              "kind": "PropertyAssociation",
              "value": "COMM_DRIVER"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "kind": "AnnexSubclause",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req001_RadioDriver",
                    "label": "Only valid command messages shall be forwarded to message destination components",
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "VALID_MESSAGE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "mission_command"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "SW::RadioDriver.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "SW::CASE_Filter",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "filter_in",
              "kind": "EventDataPort",
              "classifier": "SW::RF_Msg.Impl",
              "direction": "in"
            },
            {
              "name": "filter_out",
              "kind": "EventDataPort",
              "classifier": "SW::RF_Msg.Impl",
              "direction": "out"
            }
          ],
          "properties": [
            {
              "name": "CASE_Properties::COMP_TYPE",
              "kind": "PropertyAssociation",
              "value": "FILTER"
            },
            {
              "name": "CASE_Properties::COMP_IMPL",
              "kind": "PropertyAssociation",
              "value": "CakeML"
            },
            {
              "name": "CASE_Properties::COMP_SPEC",
              "kind": "PropertyAssociation",
              "value": "Req001_Filter"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "kind": "AnnexSubclause",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req001_RadioDriver_Filter",
                    "label": "Only valid command messages shall be forwarded to message destination components",
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "VALID_MESSAGE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "filter_out"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req001_Filter",
                    "label": "Well-formed message",
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "WELL_FORMED_MESSAGE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "filter_out"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "SW::CASE_Filter.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "SW::FlightPlanner",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "flight_plan",
              "kind": "DataPort",
              "classifier": "SW::Mission",
              "direction": "out"
            },
            {
              "name": "recv_map",
              "kind": "EventDataPort",
              "classifier": "SW::RF_Msg.Impl",
              "direction": "in"
            },
            {
              "name": "request_nofly_zones",
              "kind": "EventDataPort",
              "classifier": "SW::Map",
              "direction": "out"
            },
            {
              "name": "nofly_zones",
              "kind": "EventDataPort",
              "classifier": "SW::MapArray",
              "direction": "in"
            },
            {
              "name": "position_status",
              "kind": "EventDataPort",
              "classifier": "SW::Coordinate.Impl",
              "direction": "in"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "kind": "AnnexSubclause",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "FP_Req001",
                    "label": "The FlightPlanner shall receive a well-formed command from the GroundStation",
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "WELL_FORMED_MESSAGE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "recv_map"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_FlightPlanner",
                    "label": "The Flight Planner shall receive a valid message from the Ground Station",
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "VALID_MESSAGE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "recv_map"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_FlightPlanner",
                    "label": "The Flight Planner shall generate a valid mission",
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "good_mission"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "flight_plan"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "resolute",
              "kind": "AnnexSubclause",
              "sourceText": "{**\n\t\t\t\n\t\t\tprove(well_formed(this, \"FP_Req001\", RF_Msg.Impl))\n\t\t**}"
            }
          ]
        },
        {
          "name": "SW::FlightPlanner.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "SW::NoFlyZoneDatabase",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "map",
              "kind": "EventDataPort",
              "classifier": "SW::Map",
              "direction": "in"
            },
            {
              "name": "zones",
              "kind": "EventDataPort",
              "classifier": "SW::MapArray",
              "direction": "out"
            }
          ]
        },
        {
          "name": "SW::NoFlyZoneDatabase.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "SW::WaypointManager",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "flight_plan",
              "kind": "DataPort",
              "classifier": "SW::Mission",
              "direction": "in"
            },
            {
              "name": "mission_window",
              "kind": "EventDataPort",
              "classifier": "SW::MissionWindow",
              "direction": "out"
            },
            {
              "name": "position_status",
              "kind": "EventDataPort",
              "classifier": "SW::Coordinate.Impl",
              "direction": "in"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "kind": "AnnexSubclause",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_WaypointManager",
                    "label": "The Waypoint Manager shall receive a well-formed mission",
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "good_mission"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "flight_plan"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_WaypointManager",
                    "label": "The Waypoint Manager shall output a well-formed mission window",
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "good_mission_window"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "mission_window"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "SW::WaypointManager.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "SW::CameraManager",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "flight_plan",
              "kind": "DataPort",
              "classifier": "SW::Mission",
              "direction": "in"
            },
            {
              "name": "position_status",
              "kind": "EventDataPort",
              "classifier": "SW::Coordinate.Impl",
              "direction": "in"
            },
            {
              "name": "gimbal_command",
              "kind": "EventDataPort",
              "classifier": "null",
              "direction": "out"
            }
          ]
        },
        {
          "name": "SW::CameraManager.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "SW::UARTDriver",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "status",
              "kind": "EventDataPort",
              "classifier": "SW::Coordinate.Impl",
              "direction": "out"
            },
            {
              "name": "mission_window",
              "kind": "EventDataPort",
              "classifier": "SW::MissionWindow",
              "direction": "in"
            },
            {
              "name": "recv_data",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_UART_Msg.Impl",
              "direction": "in"
            },
            {
              "name": "send_data",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_UART_Msg.Impl",
              "direction": "out"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "kind": "AnnexSubclause",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_UARTDriver",
                    "label": "Well-formed mission window",
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "good_mission_window"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "mission_window"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_UARTDriver",
                    "label": "A CRC shall be appended to the message to determine message correctness",
                    "expr": {
                      "kind": "Selection",
                      "target": {
                        "kind": "NamedElmExpr",
                        "name": "send_data"
                      },
                      "field": "crc"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "SW::UARTDriver.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "SW::SW",
          "kind": "ComponentType",
          "category": "process",
          "features": [
            {
              "name": "radio_recv",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_RF_Msg.Impl",
              "direction": "in"
            },
            {
              "name": "radio_send",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_RF_Msg.Impl",
              "direction": "out"
            },
            {
              "name": "uart_recv",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_UART_Msg.Impl",
              "direction": "in"
            },
            {
              "name": "uart_send",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_UART_Msg.Impl",
              "direction": "out"
            },
            {
              "name": "wifi_recv",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_WIFI_Msg.Impl",
              "direction": "in"
            },
            {
              "name": "wifi_send",
              "kind": "EventDataPort",
              "classifier": "CASE_Model_Transformations::CASE_WIFI_Msg.Impl",
              "direction": "out"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "kind": "AnnexSubclause",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req001_SW",
                    "label": "The Mission Computer shall output a valid mission window to the Flight Controller",
                    "expr": {
                      "kind": "Selection",
                      "target": {
                        "kind": "NamedElmExpr",
                        "name": "uart_send"
                      },
                      "field": "crc"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "SW::SW.Impl1",
          "kind": "ComponentImplementation",
          "category": "process",
          "subcomponents": [
            {
              "name": "RADIO",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::RadioDriver.Impl"
            },
            {
              "name": "FLT",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::CASE_Filter.Impl"
            },
            {
              "name": "FPLN",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::FlightPlanner.Impl"
            },
            {
              "name": "WPM",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::WaypointManager.Impl"
            },
            {
              "name": "CM",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::CameraManager.Impl"
            },
            {
              "name": "UART",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::UARTDriver.Impl"
            },
            {
              "name": "WIFI",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::WifiDriver.Impl"
            },
            {
              "name": "NFDB",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::NoFlyZoneDatabase.Impl"
            }
          ],
          "connections": [
            {
              "name": "c1",
              "kind": "port",
              "source": "radio_recv",
              "destination": "RADIO.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c2",
              "kind": "port",
              "source": "RADIO.send_data",
              "destination": "radio_send",
              "bidirectional": "false"
            },
            {
              "name": "c3",
              "kind": "port",
              "source": "RADIO.mission_command",
              "destination": "FLT.filter_in",
              "bidirectional": "false"
            },
            {
              "name": "c4",
              "kind": "port",
              "source": "FLT.filter_out",
              "destination": "FPLN.recv_map",
              "bidirectional": "false"
            },
            {
              "name": "c5",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "WPM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c6",
              "kind": "port",
              "source": "FPLN.request_nofly_zones",
              "destination": "NFDB.map",
              "bidirectional": "false"
            },
            {
              "name": "c7",
              "kind": "port",
              "source": "NFDB.zones",
              "destination": "FPLN.nofly_zones",
              "bidirectional": "false"
            },
            {
              "name": "c8",
              "kind": "port",
              "source": "WPM.mission_window",
              "destination": "UART.mission_window",
              "bidirectional": "false"
            },
            {
              "name": "c9",
              "kind": "port",
              "source": "UART.status",
              "destination": "WPM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c10",
              "kind": "port",
              "source": "UART.status",
              "destination": "FPLN.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c11",
              "kind": "port",
              "source": "UART.status",
              "destination": "RADIO.status",
              "bidirectional": "false"
            },
            {
              "name": "c12",
              "kind": "port",
              "source": "UART.send_data",
              "destination": "uart_send",
              "bidirectional": "false"
            },
            {
              "name": "c13",
              "kind": "port",
              "source": "uart_recv",
              "destination": "UART.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c14",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "CM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c15",
              "kind": "port",
              "source": "UART.status",
              "destination": "CM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c16",
              "kind": "port",
              "source": "CM.gimbal_command",
              "destination": "WIFI.gimbal_command",
              "bidirectional": "false"
            },
            {
              "name": "c17",
              "kind": "port",
              "source": "WIFI.send_data",
              "destination": "wifi_send",
              "bidirectional": "false"
            },
            {
              "name": "c18",
              "kind": "port",
              "source": "wifi_recv",
              "destination": "WIFI.recv_data",
              "bidirectional": "false"
            }
          ]
        },
        {
          "name": "SW::SW.Impl",
          "kind": "ComponentImplementation",
          "category": "process",
          "subcomponents": [
            {
              "name": "RADIO",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::RadioDriver.Impl"
            },
            {
              "name": "FPLN",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::FlightPlanner.Impl"
            },
            {
              "name": "WPM",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::WaypointManager.Impl"
            },
            {
              "name": "CM",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::CameraManager.Impl"
            },
            {
              "name": "UART",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::UARTDriver.Impl"
            },
            {
              "name": "WIFI",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::WifiDriver.Impl"
            },
            {
              "name": "NFDB",
              "kind": "Subcomponent",
              "category": "thread",
              "classifier": "SW::NoFlyZoneDatabase.Impl"
            }
          ],
          "connections": [
            {
              "name": "c1",
              "kind": "port",
              "source": "radio_recv",
              "destination": "RADIO.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c2",
              "kind": "port",
              "source": "RADIO.send_data",
              "destination": "radio_send",
              "bidirectional": "false"
            },
            {
              "name": "c3",
              "kind": "port",
              "source": "RADIO.mission_command",
              "destination": "FPLN.recv_map",
              "bidirectional": "false"
            },
            {
              "name": "c5",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "WPM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c6",
              "kind": "port",
              "source": "FPLN.request_nofly_zones",
              "destination": "NFDB.map",
              "bidirectional": "false"
            },
            {
              "name": "c7",
              "kind": "port",
              "source": "NFDB.zones",
              "destination": "FPLN.nofly_zones",
              "bidirectional": "false"
            },
            {
              "name": "c8",
              "kind": "port",
              "source": "WPM.mission_window",
              "destination": "UART.mission_window",
              "bidirectional": "false"
            },
            {
              "name": "c9",
              "kind": "port",
              "source": "UART.status",
              "destination": "WPM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c10",
              "kind": "port",
              "source": "UART.status",
              "destination": "FPLN.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c11",
              "kind": "port",
              "source": "UART.status",
              "destination": "RADIO.status",
              "bidirectional": "false"
            },
            {
              "name": "c12",
              "kind": "port",
              "source": "UART.send_data",
              "destination": "uart_send",
              "bidirectional": "false"
            },
            {
              "name": "c13",
              "kind": "port",
              "source": "uart_recv",
              "destination": "UART.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c14",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "CM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c15",
              "kind": "port",
              "source": "UART.status",
              "destination": "CM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c16",
              "kind": "port",
              "source": "CM.gimbal_command",
              "destination": "WIFI.gimbal_command",
              "bidirectional": "false"
            },
            {
              "name": "c17",
              "kind": "port",
              "source": "WIFI.send_data",
              "destination": "wifi_send",
              "bidirectional": "false"
            },
            {
              "name": "c18",
              "kind": "port",
              "source": "wifi_recv",
              "destination": "WIFI.recv_data",
              "bidirectional": "false"
            }
          ]
        }
      ],
      "annexes": [
        {
          "name": "agree",
          "kind": "AnnexLibrary",
          "parsedAnnexLibrary": {
            "statements": [
              {
                "kind": "ConstStatement",
                "name": "CASE_UAV_ID",
                "type": {
                  "kind": "PrimType",
                  "primType": "int"
                },
                "expr": {
                  "kind": "IntLitExpr",
                  "value": "42"
                }
              },
              {
                "kind": "FnDef",
                "name": "VALID_MESSAGE",
                "args": [
                  {
                    "name": "msg",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "RF_Msg.Impl"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "Selection",
                        "target": {
                          "kind": "Selection",
                          "target": {
                            "kind": "NamedElmExpr",
                            "name": "msg"
                          },
                          "field": "header"
                        },
                        "field": "src"
                      },
                      "op": ">",
                      "right": {
                        "kind": "IntLitExpr",
                        "value": "0"
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "Selection",
                        "target": {
                          "kind": "Selection",
                          "target": {
                            "kind": "NamedElmExpr",
                            "name": "msg"
                          },
                          "field": "header"
                        },
                        "field": "dst"
                      },
                      "op": "=",
                      "right": {
                        "kind": "NamedElmExpr",
                        "name": "CASE_UAV_ID"
                      }
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "Selection",
                    "target": {
                      "kind": "Selection",
                      "target": {
                        "kind": "NamedElmExpr",
                        "name": "msg"
                      },
                      "field": "header"
                    },
                    "field": "HMAC"
                  }
                }
              },
              {
                "kind": "FnDef",
                "name": "TRUSTED_MESSAGE",
                "args": [
                  {
                    "name": "msg",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "RF_Msg.Impl"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "Selection",
                  "target": {
                    "kind": "Selection",
                    "target": {
                      "kind": "NamedElmExpr",
                      "name": "msg"
                    },
                    "field": "header"
                  },
                  "field": "trusted"
                }
              },
              {
                "kind": "FnDef",
                "name": "WELL_FORMED_MESSAGE",
                "args": [
                  {
                    "name": "msg",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "RF_Msg.Impl"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "CallExpr",
                  "function": {
                    "kind": "DoubleDotRef",
                    "name": "good_command"
                  },
                  "args": [
                    {
                      "kind": "Selection",
                      "target": {
                        "kind": "NamedElmExpr",
                        "name": "msg"
                      },
                      "field": "payload"
                    }
                  ]
                }
              },
              {
                "kind": "FnDef",
                "name": "good_coordinate",
                "args": [
                  {
                    "name": "coord",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "Coordinate.Impl"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "Selection",
                              "target": {
                                "kind": "NamedElmExpr",
                                "name": "coord"
                              },
                              "field": "latitude"
                            },
                            "op": ">=",
                            "right": {
                              "kind": "UnaryExpr",
                              "operand": {
                                "kind": "IntLitExpr",
                                "value": "90"
                              },
                              "op": "-"
                            }
                          },
                          "op": "and",
                          "right": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "Selection",
                              "target": {
                                "kind": "NamedElmExpr",
                                "name": "coord"
                              },
                              "field": "latitude"
                            },
                            "op": "<=",
                            "right": {
                              "kind": "IntLitExpr",
                              "value": "90"
                            }
                          }
                        },
                        "op": "and",
                        "right": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "Selection",
                            "target": {
                              "kind": "NamedElmExpr",
                              "name": "coord"
                            },
                            "field": "longitude"
                          },
                          "op": ">=",
                          "right": {
                            "kind": "UnaryExpr",
                            "operand": {
                              "kind": "IntLitExpr",
                              "value": "180"
                            },
                            "op": "-"
                          }
                        }
                      },
                      "op": "and",
                      "right": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "Selection",
                          "target": {
                            "kind": "NamedElmExpr",
                            "name": "coord"
                          },
                          "field": "longitude"
                        },
                        "op": "<=",
                        "right": {
                          "kind": "IntLitExpr",
                          "value": "180"
                        }
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "Selection",
                        "target": {
                          "kind": "NamedElmExpr",
                          "name": "coord"
                        },
                        "field": "altitude"
                      },
                      "op": ">=",
                      "right": {
                        "kind": "IntLitExpr",
                        "value": "0"
                      }
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "Selection",
                      "target": {
                        "kind": "NamedElmExpr",
                        "name": "coord"
                      },
                      "field": "altitude"
                    },
                    "op": "<=",
                    "right": {
                      "kind": "IntLitExpr",
                      "value": "15000"
                    }
                  }
                }
              },
              {
                "kind": "FnDef",
                "name": "good_map",
                "args": [
                  {
                    "name": "map",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "Map"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "ForallExpr",
                  "binding": "wp",
                  "array": {
                    "kind": "NamedElmExpr",
                    "name": "map"
                  },
                  "expr": {
                    "kind": "CallExpr",
                    "function": {
                      "kind": "DoubleDotRef",
                      "name": "good_coordinate"
                    },
                    "args": [
                      {
                        "kind": "NamedElmExpr",
                        "name": "wp"
                      }
                    ]
                  }
                }
              },
              {
                "kind": "FnDef",
                "name": "good_pattern",
                "args": [
                  {
                    "name": "pattern",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "FlightPattern"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "NamedElmExpr",
                        "name": "pattern"
                      },
                      "op": "=",
                      "right": {
                        "kind": "AadlEnumerator",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "FlightPattern"
                        },
                        "value": "ZigZag"
                      }
                    },
                    "op": "or",
                    "right": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "NamedElmExpr",
                        "name": "pattern"
                      },
                      "op": "=",
                      "right": {
                        "kind": "AadlEnumerator",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "FlightPattern"
                        },
                        "value": "StraightLine"
                      }
                    }
                  },
                  "op": "or",
                  "right": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "NamedElmExpr",
                      "name": "pattern"
                    },
                    "op": "=",
                    "right": {
                      "kind": "AadlEnumerator",
                      "type": {
                        "kind": "DoubleDotRef",
                        "name": "FlightPattern"
                      },
                      "value": "Perimeter"
                    }
                  }
                }
              },
              {
                "kind": "FnDef",
                "name": "good_command",
                "args": [
                  {
                    "name": "cmd",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "Command.Impl"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "CallExpr",
                    "function": {
                      "kind": "DoubleDotRef",
                      "name": "good_map"
                    },
                    "args": [
                      {
                        "kind": "Selection",
                        "target": {
                          "kind": "NamedElmExpr",
                          "name": "cmd"
                        },
                        "field": "map"
                      }
                    ]
                  },
                  "op": "and",
                  "right": {
                    "kind": "CallExpr",
                    "function": {
                      "kind": "DoubleDotRef",
                      "name": "good_pattern"
                    },
                    "args": [
                      {
                        "kind": "Selection",
                        "target": {
                          "kind": "NamedElmExpr",
                          "name": "cmd"
                        },
                        "field": "pattern"
                      }
                    ]
                  }
                }
              },
              {
                "kind": "FnDef",
                "name": "good_mission",
                "args": [
                  {
                    "name": "mission",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "Mission"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "ForallExpr",
                  "binding": "wp",
                  "array": {
                    "kind": "NamedElmExpr",
                    "name": "mission"
                  },
                  "expr": {
                    "kind": "CallExpr",
                    "function": {
                      "kind": "DoubleDotRef",
                      "name": "good_coordinate"
                    },
                    "args": [
                      {
                        "kind": "NamedElmExpr",
                        "name": "wp"
                      }
                    ]
                  }
                }
              },
              {
                "kind": "FnDef",
                "name": "good_mission_window",
                "args": [
                  {
                    "name": "win",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "MissionWindow"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "ForallExpr",
                  "binding": "wp",
                  "array": {
                    "kind": "NamedElmExpr",
                    "name": "win"
                  },
                  "expr": {
                    "kind": "CallExpr",
                    "function": {
                      "kind": "DoubleDotRef",
                      "name": "good_coordinate"
                    },
                    "args": [
                      {
                        "kind": "NamedElmExpr",
                        "name": "wp"
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "Data_Model",
    "kind": "PropertySet",
    "properties": [
      {
        "name": "Data_Model::Base_Type",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "ClassifierType",
            "name": [
              "data"
            ]
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Code_Set",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Data_Digits",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Data_Scale",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Data_Representation",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "Array",
            "Boolean",
            "Character",
            "Enum",
            "Float",
            "Fixed",
            "Integer",
            "String",
            "Struct",
            "Union"
          ]
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::MyDimension",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Dimension",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "AadlInteger"
          }
        },
        "appliesTo": [
          "data",
          "data port",
          "event data port",
          "data access"
        ]
      },
      {
        "name": "Data_Model::Element_Names",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "AadlString"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Enumerators",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "AadlString"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::IEEE754_Precision",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "Simple",
            "Double"
          ]
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Initial_Value",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "AadlString"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Integer_Range",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "RangeType",
          "numberType": {
            "kind": "AadlInteger"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Measurement_Unit",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlString"
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Number_Representation",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "Signed",
            "Unsigned"
          ]
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Real_Range",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "RangeType",
          "numberType": {
            "kind": "AadlReal"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Model::Representation",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "AadlString"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      }
    ]
  },
  {
    "name": "Base_Types",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "Data_Model"
      ],
      "components": [
        {
          "name": "Base_Types::Boolean",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "kind": "PropertyAssociation",
              "value": "Boolean"
            }
          ]
        },
        {
          "name": "Base_Types::Integer",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "kind": "PropertyAssociation",
              "value": "Integer"
            }
          ]
        },
        {
          "name": "Base_Types::Integer_8",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Integer",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Integer"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "kind": "PropertyAssociation",
              "value": "Signed"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "kind": "PropertyAssociation",
              "value": "1"
            }
          ]
        },
        {
          "name": "Base_Types::Integer_16",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Integer",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Integer"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "kind": "PropertyAssociation",
              "value": "Signed"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "kind": "PropertyAssociation",
              "value": "2"
            }
          ]
        },
        {
          "name": "Base_Types::Integer_32",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Integer",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Integer"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "kind": "PropertyAssociation",
              "value": "Signed"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "kind": "PropertyAssociation",
              "value": "4"
            }
          ]
        },
        {
          "name": "Base_Types::Integer_64",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Integer",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Integer"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "kind": "PropertyAssociation",
              "value": "Signed"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "kind": "PropertyAssociation",
              "value": "8"
            }
          ]
        },
        {
          "name": "Base_Types::Unsigned_8",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Integer",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Integer"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "kind": "PropertyAssociation",
              "value": "Unsigned"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "kind": "PropertyAssociation",
              "value": "1"
            }
          ]
        },
        {
          "name": "Base_Types::Unsigned_16",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Integer",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Integer"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "kind": "PropertyAssociation",
              "value": "Unsigned"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "kind": "PropertyAssociation",
              "value": "2"
            }
          ]
        },
        {
          "name": "Base_Types::Unsigned_32",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Integer",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Integer"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "kind": "PropertyAssociation",
              "value": "Unsigned"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "kind": "PropertyAssociation",
              "value": "4"
            }
          ]
        },
        {
          "name": "Base_Types::Unsigned_64",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Integer",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Integer"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "kind": "PropertyAssociation",
              "value": "Unsigned"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "kind": "PropertyAssociation",
              "value": "8"
            }
          ]
        },
        {
          "name": "Base_Types::Natural",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Integer",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Integer"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::Integer_Range",
              "kind": "PropertyAssociation",
              "value": "0 .. Max_Target_Integer"
            }
          ]
        },
        {
          "name": "Base_Types::Float",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "kind": "PropertyAssociation",
              "value": "Float"
            }
          ]
        },
        {
          "name": "Base_Types::Float_32",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Float",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Float"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::IEEE754_Precision",
              "kind": "PropertyAssociation",
              "value": "Simple"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "kind": "PropertyAssociation",
              "value": "4"
            }
          ]
        },
        {
          "name": "Base_Types::Float_64",
          "kind": "ComponentType",
          "category": "data",
          "extends": {
            "name": "Base_Types::Float",
            "kind": "ComponentType",
            "category": "data",
            "properties": [
              {
                "name": "Data_Model::Data_Representation",
                "kind": "PropertyAssociation",
                "value": "Float"
              }
            ]
          },
          "properties": [
            {
              "name": "Data_Model::IEEE754_Precision",
              "kind": "PropertyAssociation",
              "value": "Double"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "kind": "PropertyAssociation",
              "value": "8"
            }
          ]
        },
        {
          "name": "Base_Types::Character",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "kind": "PropertyAssociation",
              "value": "Character"
            }
          ]
        },
        {
          "name": "Base_Types::String",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "kind": "PropertyAssociation",
              "value": "String"
            }
          ]
        }
      ]
    }
  },
  {
    "name": "CASE_Properties",
    "kind": "PropertySet",
    "properties": [
      {
        "name": "CASE_Properties::COMP_TYPE",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "FILTER",
            "ATTESTATION",
            "MONITOR",
            "ROUTER",
            "ISOLATOR",
            "COMM_DRIVER"
          ]
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "CASE_Properties::COMP_IMPL",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlString"
        },
        "appliesTo": [
          "thread"
        ]
      },
      {
        "name": "CASE_Properties::COMP_SPEC",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlString"
        },
        "appliesTo": [
          "thread"
        ]
      },
      {
        "name": "CASE_Properties::CACHE_TIMEOUT",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "CASE_Properties::CACHE_SIZE",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "CASE_Properties::LOG_SIZE",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "CASE_Properties::BOUNDARY",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "EnumerationType",
            "values": [
              "TRUSTED",
              "PHYSICAL"
            ]
          }
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "CASE_Properties::CONFIDENTIALITY",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "HIGH",
            "MEDIUM",
            "LOW"
          ]
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "CASE_Properties::INTEGRITY",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "HIGH",
            "MEDIUM",
            "LOW"
          ]
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "CASE_Properties::AVAILABILITY",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "HIGH",
            "MEDIUM",
            "LOW"
          ]
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "CASE_Properties::COMM_MODALITY",
        "kind": "Property",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "RF",
            "WIFI",
            "WIRED_ETHERNET",
            "SERIAL",
            "BT"
          ]
        },
        "appliesTo": [
          "bus"
        ]
      }
    ]
  },
  {
    "name": "CASE_Model_Transformations",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "Base_Types",
        "CASE_Properties"
      ],
      "components": [
        {
          "name": "CASE_Model_Transformations::CASE_MsgHeader",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_Model_Transformations::CASE_MsgHeader.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "src",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "dst",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "trusted",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Boolean"
            },
            {
              "name": "HMAC",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Boolean"
            }
          ]
        },
        {
          "name": "CASE_Model_Transformations::CASE_RF_Msg",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_Model_Transformations::CASE_RF_Msg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "header",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_MsgHeader.Impl"
            },
            {
              "name": "payload",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "null"
            }
          ]
        },
        {
          "name": "CASE_Model_Transformations::CASE_UART_Msg",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_Model_Transformations::CASE_UART_Msg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "crc",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Boolean"
            },
            {
              "name": "message",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::String"
            }
          ]
        },
        {
          "name": "CASE_Model_Transformations::CASE_WIFI_Msg",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_Model_Transformations::CASE_WIFI_Msg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "crc",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Boolean"
            },
            {
              "name": "message",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::String"
            }
          ]
        },
        {
          "name": "CASE_Model_Transformations::CASE_AttestationRequestMsg",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_Model_Transformations::CASE_AttestationRequestMsg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "header",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_MsgHeader.Impl"
            }
          ]
        },
        {
          "name": "CASE_Model_Transformations::CASE_AttestationResponseMsg",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_Model_Transformations::CASE_AttestationResponseMsg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "header",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_MsgHeader.Impl"
            },
            {
              "name": "status",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Boolean"
            }
          ]
        },
        {
          "name": "CASE_Model_Transformations::CASE_AttestationCacheRecord",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "src",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "trusted",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "timeout",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "Base_Types::Integer"
            }
          ]
        },
        {
          "name": "CASE_Model_Transformations::CASE_AttestationCache",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_Model_Transformations::CASE_AttestationCache.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "src1",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            },
            {
              "name": "src2",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            },
            {
              "name": "src3",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            },
            {
              "name": "src4",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            },
            {
              "name": "src5",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            },
            {
              "name": "src6",
              "kind": "Subcomponent",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            }
          ]
        }
      ],
      "annexes": [
        {
          "name": "Agree",
          "kind": "AnnexLibrary",
          "parsedAnnexLibrary": {
            "statements": [
              {
                "kind": "ConstStatement",
                "name": "NULL_ID",
                "type": {
                  "kind": "PrimType",
                  "primType": "int"
                },
                "expr": {
                  "kind": "IntLitExpr",
                  "value": "0"
                }
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_HEADER",
                "type": {
                  "kind": "DoubleDotRef",
                  "name": "CASE_MsgHeader.Impl"
                },
                "expr": {
                  "kind": "RecordLitExpr",
                  "recordType": {
                    "kind": "DoubleDotRef",
                    "name": "CASE_MsgHeader.Impl"
                  },
                  "value": {
                    "src": {
                      "kind": "NamedElmExpr",
                      "name": "NULL_ID"
                    },
                    "dst": {
                      "kind": "NamedElmExpr",
                      "name": "NULL_ID"
                    },
                    "trusted": {
                      "kind": "BoolLitExpr",
                      "value": "false"
                    },
                    "HMAC": {
                      "kind": "BoolLitExpr",
                      "value": "false"
                    }
                  }
                }
              },
              {
                "kind": "FnDef",
                "name": "NULL_MESSAGE",
                "args": [
                  {
                    "name": "header",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "CASE_MsgHeader.Impl"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "NamedElmExpr",
                    "name": "header"
                  },
                  "op": "=",
                  "right": {
                    "kind": "NamedElmExpr",
                    "name": "NULL_HEADER"
                  }
                }
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_MSG_TYPE",
                "type": {
                  "kind": "PrimType",
                  "primType": "int"
                },
                "expr": {
                  "kind": "IntLitExpr",
                  "value": "0"
                }
              },
              {
                "kind": "ConstStatement",
                "name": "AM_REQUEST_MSG_TYPE",
                "type": {
                  "kind": "PrimType",
                  "primType": "int"
                },
                "expr": {
                  "kind": "IntLitExpr",
                  "value": "1"
                }
              },
              {
                "kind": "ConstStatement",
                "name": "AM_RESPONSE_MSG_TYPE",
                "type": {
                  "kind": "PrimType",
                  "primType": "int"
                },
                "expr": {
                  "kind": "IntLitExpr",
                  "value": "2"
                }
              },
              {
                "kind": "ConstStatement",
                "name": "FREE_MSG_TYPE",
                "type": {
                  "kind": "PrimType",
                  "primType": "int"
                },
                "expr": {
                  "kind": "IntLitExpr",
                  "value": "3"
                }
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_AM_REQUEST_MESSAGE",
                "type": {
                  "kind": "DoubleDotRef",
                  "name": "CASE_AttestationRequestMsg.Impl"
                },
                "expr": {
                  "kind": "RecordLitExpr",
                  "recordType": {
                    "kind": "DoubleDotRef",
                    "name": "CASE_AttestationRequestMsg.Impl"
                  },
                  "value": {
                    "header": {
                      "kind": "NamedElmExpr",
                      "name": "NULL_HEADER"
                    }
                  }
                }
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_CACHE",
                "type": {
                  "kind": "DoubleDotRef",
                  "name": "CASE_AttestationCache.Impl"
                },
                "expr": {
                  "kind": "RecordLitExpr",
                  "recordType": {
                    "kind": "DoubleDotRef",
                    "name": "CASE_AttestationCache.Impl"
                  },
                  "value": {
                    "src1": {
                      "kind": "NamedElmExpr",
                      "name": "NULL_RECORD"
                    },
                    "src2": {
                      "kind": "NamedElmExpr",
                      "name": "NULL_RECORD"
                    },
                    "src3": {
                      "kind": "NamedElmExpr",
                      "name": "NULL_RECORD"
                    },
                    "src4": {
                      "kind": "NamedElmExpr",
                      "name": "NULL_RECORD"
                    },
                    "src5": {
                      "kind": "NamedElmExpr",
                      "name": "NULL_RECORD"
                    },
                    "src6": {
                      "kind": "NamedElmExpr",
                      "name": "NULL_RECORD"
                    }
                  }
                }
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_RECORD",
                "type": {
                  "kind": "DoubleDotRef",
                  "name": "CASE_AttestationCacheRecord.Impl"
                },
                "expr": {
                  "kind": "RecordLitExpr",
                  "recordType": {
                    "kind": "DoubleDotRef",
                    "name": "CASE_AttestationCacheRecord.Impl"
                  },
                  "value": {
                    "src": {
                      "kind": "NamedElmExpr",
                      "name": "NULL_ID"
                    },
                    "trusted": {
                      "kind": "NamedElmExpr",
                      "name": "AM_FAIL"
                    },
                    "timeout": {
                      "kind": "IntLitExpr",
                      "value": "0"
                    }
                  }
                }
              },
              {
                "kind": "NodeDef",
                "name": "CACHE",
                "args": [
                  {
                    "name": "new_cache",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "CASE_AttestationCache.Impl"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "cache",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "CASE_AttestationCache.Impl"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "cache",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCache.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "NamedElmExpr",
                          "name": "new_cache"
                        },
                        "op": "=",
                        "right": {
                          "kind": "NamedElmExpr",
                          "name": "NULL_CACHE"
                        }
                      },
                      "then": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "NamedElmExpr",
                          "name": "NULL_CACHE"
                        },
                        "op": "->",
                        "right": {
                          "kind": "PreExpr",
                          "expr": {
                            "kind": "NamedElmExpr",
                            "name": "cache"
                          }
                        }
                      },
                      "else": {
                        "kind": "NamedElmExpr",
                        "name": "new_cache"
                      }
                    }
                  }
                ]
              },
              {
                "kind": "FnDef",
                "name": "TRUSTED",
                "args": [
                  {
                    "name": "src",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "Integer"
                    }
                  }
                ],
                "type": {
                  "kind": "PrimType",
                  "primType": "bool"
                },
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "IN_CACHE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "src"
                        }
                      ]
                    },
                    "op": "and",
                    "right": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "PASS_ATTESTATION"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "src"
                        }
                      ]
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "UnaryExpr",
                    "operand": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "IS_STALE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "src"
                        }
                      ]
                    },
                    "op": "not"
                  }
                }
              },
              {
                "kind": "ConstStatement",
                "name": "AM_FAIL",
                "type": {
                  "kind": "PrimType",
                  "primType": "int"
                },
                "expr": {
                  "kind": "IntLitExpr",
                  "value": "0"
                }
              },
              {
                "kind": "ConstStatement",
                "name": "AM_PASS",
                "type": {
                  "kind": "PrimType",
                  "primType": "int"
                },
                "expr": {
                  "kind": "IntLitExpr",
                  "value": "1"
                }
              },
              {
                "kind": "ConstStatement",
                "name": "AM_REQUESTING",
                "type": {
                  "kind": "PrimType",
                  "primType": "int"
                },
                "expr": {
                  "kind": "IntLitExpr",
                  "value": "2"
                }
              },
              {
                "kind": "NodeDef",
                "name": "IN_CACHE",
                "args": [
                  {
                    "name": "src",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "result",
                    "type": {
                      "kind": "PrimType",
                      "primType": "bool"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "result",
                        "type": {
                          "kind": "PrimType",
                          "primType": "bool"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "UnaryExpr",
                      "operand": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "CallExpr",
                          "function": {
                            "kind": "DoubleDotRef",
                            "name": "GET_RECORD_BY_NAME"
                          },
                          "args": [
                            {
                              "kind": "NamedElmExpr",
                              "name": "src"
                            }
                          ]
                        },
                        "op": "=",
                        "right": {
                          "kind": "NamedElmExpr",
                          "name": "NULL_RECORD"
                        }
                      },
                      "op": "not"
                    }
                  }
                ]
              },
              {
                "kind": "NodeDef",
                "name": "GET_STATUS",
                "args": [
                  {
                    "name": "src",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "result",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "record",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCacheRecord.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "GET_RECORD_BY_NAME"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "src"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "result",
                        "type": {
                          "kind": "PrimType",
                          "primType": "int"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "Selection",
                      "target": {
                        "kind": "NamedElmExpr",
                        "name": "record"
                      },
                      "field": "trusted"
                    }
                  }
                ]
              },
              {
                "kind": "NodeDef",
                "name": "PASS_ATTESTATION",
                "args": [
                  {
                    "name": "src",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "result",
                    "type": {
                      "kind": "PrimType",
                      "primType": "bool"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "record",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCacheRecord.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "GET_RECORD_BY_NAME"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "src"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "result",
                        "type": {
                          "kind": "PrimType",
                          "primType": "bool"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "Selection",
                        "target": {
                          "kind": "NamedElmExpr",
                          "name": "record"
                        },
                        "field": "trusted"
                      },
                      "op": "=",
                      "right": {
                        "kind": "NamedElmExpr",
                        "name": "AM_PASS"
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDef",
                "name": "IS_STALE",
                "args": [
                  {
                    "name": "src",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "result",
                    "type": {
                      "kind": "PrimType",
                      "primType": "bool"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "record",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCacheRecord.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "GET_RECORD_BY_NAME"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "src"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "result",
                        "type": {
                          "kind": "PrimType",
                          "primType": "bool"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "BoolLitExpr",
                      "value": "false"
                    }
                  }
                ]
              },
              {
                "kind": "NodeDef",
                "name": "CREATE_RECORD",
                "args": [
                  {
                    "name": "new_src",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  },
                  {
                    "name": "new_trusted",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  },
                  {
                    "name": "new_timeout",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "new_record",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "CASE_AttestationCacheRecord.Impl"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "new_record",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCacheRecord.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "RecordLitExpr",
                      "recordType": {
                        "kind": "DoubleDotRef",
                        "name": "CASE_AttestationCacheRecord.Impl"
                      },
                      "value": {
                        "src": {
                          "kind": "NamedElmExpr",
                          "name": "new_src"
                        },
                        "trusted": {
                          "kind": "NamedElmExpr",
                          "name": "new_trusted"
                        },
                        "timeout": {
                          "kind": "NamedElmExpr",
                          "name": "new_timeout"
                        }
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDef",
                "name": "ADD_RECORD",
                "args": [
                  {
                    "name": "src",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  },
                  {
                    "name": "trusted",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  },
                  {
                    "name": "timeout",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  },
                  {
                    "name": "max_idx",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "success",
                    "type": {
                      "kind": "PrimType",
                      "primType": "bool"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "free_idx",
                        "type": {
                          "kind": "PrimType",
                          "primType": "int"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "GET_FREE_IDX"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "max_idx"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "success",
                        "type": {
                          "kind": "PrimType",
                          "primType": "bool"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "CallExpr",
                        "function": {
                          "kind": "DoubleDotRef",
                          "name": "IN_CACHE"
                        },
                        "args": [
                          {
                            "kind": "NamedElmExpr",
                            "name": "src"
                          }
                        ]
                      },
                      "then": {
                        "kind": "UnaryExpr",
                        "operand": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "CallExpr",
                            "function": {
                              "kind": "DoubleDotRef",
                              "name": "WRITE_CACHE"
                            },
                            "args": [
                              {
                                "kind": "CallExpr",
                                "function": {
                                  "kind": "DoubleDotRef",
                                  "name": "GET_IDX_BY_NAME"
                                },
                                "args": [
                                  {
                                    "kind": "NamedElmExpr",
                                    "name": "src"
                                  }
                                ]
                              },
                              {
                                "kind": "CallExpr",
                                "function": {
                                  "kind": "DoubleDotRef",
                                  "name": "CREATE_RECORD"
                                },
                                "args": [
                                  {
                                    "kind": "NamedElmExpr",
                                    "name": "src"
                                  },
                                  {
                                    "kind": "NamedElmExpr",
                                    "name": "trusted"
                                  },
                                  {
                                    "kind": "NamedElmExpr",
                                    "name": "timeout"
                                  }
                                ]
                              }
                            ]
                          },
                          "op": "=",
                          "right": {
                            "kind": "NamedElmExpr",
                            "name": "NULL_CACHE"
                          }
                        },
                        "op": "not"
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "NamedElmExpr",
                            "name": "free_idx"
                          },
                          "op": ">",
                          "right": {
                            "kind": "IntLitExpr",
                            "value": "0"
                          }
                        },
                        "then": {
                          "kind": "UnaryExpr",
                          "operand": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "CallExpr",
                              "function": {
                                "kind": "DoubleDotRef",
                                "name": "WRITE_CACHE"
                              },
                              "args": [
                                {
                                  "kind": "NamedElmExpr",
                                  "name": "free_idx"
                                },
                                {
                                  "kind": "CallExpr",
                                  "function": {
                                    "kind": "DoubleDotRef",
                                    "name": "CREATE_RECORD"
                                  },
                                  "args": [
                                    {
                                      "kind": "NamedElmExpr",
                                      "name": "src"
                                    },
                                    {
                                      "kind": "NamedElmExpr",
                                      "name": "trusted"
                                    },
                                    {
                                      "kind": "NamedElmExpr",
                                      "name": "timeout"
                                    }
                                  ]
                                }
                              ]
                            },
                            "op": "=",
                            "right": {
                              "kind": "NamedElmExpr",
                              "name": "NULL_CACHE"
                            }
                          },
                          "op": "not"
                        },
                        "else": {
                          "kind": "BoolLitExpr",
                          "value": "false"
                        }
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDef",
                "name": "GET_FREE_IDX",
                "args": [
                  {
                    "name": "max",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "idx",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "c",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCache.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "CACHE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "NULL_CACHE"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "idx",
                        "type": {
                          "kind": "PrimType",
                          "primType": "int"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "Selection",
                            "target": {
                              "kind": "NamedElmExpr",
                              "name": "c"
                            },
                            "field": "src1"
                          },
                          "op": "=",
                          "right": {
                            "kind": "NamedElmExpr",
                            "name": "NULL_RECORD"
                          }
                        },
                        "op": "and",
                        "right": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "NamedElmExpr",
                            "name": "max"
                          },
                          "op": ">=",
                          "right": {
                            "kind": "IntLitExpr",
                            "value": "1"
                          }
                        }
                      },
                      "then": {
                        "kind": "IntLitExpr",
                        "value": "1"
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "Selection",
                              "target": {
                                "kind": "NamedElmExpr",
                                "name": "c"
                              },
                              "field": "src2"
                            },
                            "op": "=",
                            "right": {
                              "kind": "NamedElmExpr",
                              "name": "NULL_RECORD"
                            }
                          },
                          "op": "and",
                          "right": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "NamedElmExpr",
                              "name": "max"
                            },
                            "op": ">=",
                            "right": {
                              "kind": "IntLitExpr",
                              "value": "2"
                            }
                          }
                        },
                        "then": {
                          "kind": "IntLitExpr",
                          "value": "2"
                        },
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "BinaryExpr",
                              "left": {
                                "kind": "Selection",
                                "target": {
                                  "kind": "NamedElmExpr",
                                  "name": "c"
                                },
                                "field": "src3"
                              },
                              "op": "=",
                              "right": {
                                "kind": "NamedElmExpr",
                                "name": "NULL_RECORD"
                              }
                            },
                            "op": "and",
                            "right": {
                              "kind": "BinaryExpr",
                              "left": {
                                "kind": "NamedElmExpr",
                                "name": "max"
                              },
                              "op": ">=",
                              "right": {
                                "kind": "IntLitExpr",
                                "value": "3"
                              }
                            }
                          },
                          "then": {
                            "kind": "IntLitExpr",
                            "value": "3"
                          },
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "BinaryExpr",
                              "left": {
                                "kind": "BinaryExpr",
                                "left": {
                                  "kind": "Selection",
                                  "target": {
                                    "kind": "NamedElmExpr",
                                    "name": "c"
                                  },
                                  "field": "src4"
                                },
                                "op": "=",
                                "right": {
                                  "kind": "NamedElmExpr",
                                  "name": "NULL_RECORD"
                                }
                              },
                              "op": "and",
                              "right": {
                                "kind": "BinaryExpr",
                                "left": {
                                  "kind": "NamedElmExpr",
                                  "name": "max"
                                },
                                "op": ">=",
                                "right": {
                                  "kind": "IntLitExpr",
                                  "value": "4"
                                }
                              }
                            },
                            "then": {
                              "kind": "IntLitExpr",
                              "value": "4"
                            },
                            "else": {
                              "kind": "IfThenElseExpr",
                              "if": {
                                "kind": "BinaryExpr",
                                "left": {
                                  "kind": "BinaryExpr",
                                  "left": {
                                    "kind": "Selection",
                                    "target": {
                                      "kind": "NamedElmExpr",
                                      "name": "c"
                                    },
                                    "field": "src5"
                                  },
                                  "op": "=",
                                  "right": {
                                    "kind": "NamedElmExpr",
                                    "name": "NULL_RECORD"
                                  }
                                },
                                "op": "and",
                                "right": {
                                  "kind": "BinaryExpr",
                                  "left": {
                                    "kind": "NamedElmExpr",
                                    "name": "max"
                                  },
                                  "op": ">=",
                                  "right": {
                                    "kind": "IntLitExpr",
                                    "value": "5"
                                  }
                                }
                              },
                              "then": {
                                "kind": "IntLitExpr",
                                "value": "5"
                              },
                              "else": {
                                "kind": "IfThenElseExpr",
                                "if": {
                                  "kind": "BinaryExpr",
                                  "left": {
                                    "kind": "BinaryExpr",
                                    "left": {
                                      "kind": "Selection",
                                      "target": {
                                        "kind": "NamedElmExpr",
                                        "name": "c"
                                      },
                                      "field": "src6"
                                    },
                                    "op": "=",
                                    "right": {
                                      "kind": "NamedElmExpr",
                                      "name": "NULL_RECORD"
                                    }
                                  },
                                  "op": "and",
                                  "right": {
                                    "kind": "BinaryExpr",
                                    "left": {
                                      "kind": "NamedElmExpr",
                                      "name": "max"
                                    },
                                    "op": ">=",
                                    "right": {
                                      "kind": "IntLitExpr",
                                      "value": "6"
                                    }
                                  }
                                },
                                "then": {
                                  "kind": "IntLitExpr",
                                  "value": "6"
                                },
                                "else": {
                                  "kind": "IntLitExpr",
                                  "value": "0"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDef",
                "name": "GET_RECORD_BY_IDX",
                "args": [
                  {
                    "name": "idx",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "record",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "CASE_AttestationCacheRecord.Impl"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "c",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCache.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "CACHE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "NULL_CACHE"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "record",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCacheRecord.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "NamedElmExpr",
                          "name": "idx"
                        },
                        "op": "=",
                        "right": {
                          "kind": "IntLitExpr",
                          "value": "1"
                        }
                      },
                      "then": {
                        "kind": "Selection",
                        "target": {
                          "kind": "NamedElmExpr",
                          "name": "c"
                        },
                        "field": "src1"
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "NamedElmExpr",
                            "name": "idx"
                          },
                          "op": "=",
                          "right": {
                            "kind": "IntLitExpr",
                            "value": "2"
                          }
                        },
                        "then": {
                          "kind": "Selection",
                          "target": {
                            "kind": "NamedElmExpr",
                            "name": "c"
                          },
                          "field": "src2"
                        },
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "NamedElmExpr",
                              "name": "idx"
                            },
                            "op": "=",
                            "right": {
                              "kind": "IntLitExpr",
                              "value": "3"
                            }
                          },
                          "then": {
                            "kind": "Selection",
                            "target": {
                              "kind": "NamedElmExpr",
                              "name": "c"
                            },
                            "field": "src3"
                          },
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "BinaryExpr",
                              "left": {
                                "kind": "NamedElmExpr",
                                "name": "idx"
                              },
                              "op": "=",
                              "right": {
                                "kind": "IntLitExpr",
                                "value": "4"
                              }
                            },
                            "then": {
                              "kind": "Selection",
                              "target": {
                                "kind": "NamedElmExpr",
                                "name": "c"
                              },
                              "field": "src4"
                            },
                            "else": {
                              "kind": "IfThenElseExpr",
                              "if": {
                                "kind": "BinaryExpr",
                                "left": {
                                  "kind": "NamedElmExpr",
                                  "name": "idx"
                                },
                                "op": "=",
                                "right": {
                                  "kind": "IntLitExpr",
                                  "value": "5"
                                }
                              },
                              "then": {
                                "kind": "Selection",
                                "target": {
                                  "kind": "NamedElmExpr",
                                  "name": "c"
                                },
                                "field": "src5"
                              },
                              "else": {
                                "kind": "IfThenElseExpr",
                                "if": {
                                  "kind": "BinaryExpr",
                                  "left": {
                                    "kind": "NamedElmExpr",
                                    "name": "idx"
                                  },
                                  "op": "=",
                                  "right": {
                                    "kind": "IntLitExpr",
                                    "value": "6"
                                  }
                                },
                                "then": {
                                  "kind": "Selection",
                                  "target": {
                                    "kind": "NamedElmExpr",
                                    "name": "c"
                                  },
                                  "field": "src6"
                                },
                                "else": {
                                  "kind": "NamedElmExpr",
                                  "name": "NULL_RECORD"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDef",
                "name": "GET_RECORD_BY_NAME",
                "args": [
                  {
                    "name": "src",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "record",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "CASE_AttestationCacheRecord.Impl"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "c",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCache.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "CACHE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "NULL_CACHE"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "record",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCacheRecord.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "Selection",
                          "target": {
                            "kind": "Selection",
                            "target": {
                              "kind": "NamedElmExpr",
                              "name": "c"
                            },
                            "field": "src1"
                          },
                          "field": "src"
                        },
                        "op": "=",
                        "right": {
                          "kind": "NamedElmExpr",
                          "name": "src"
                        }
                      },
                      "then": {
                        "kind": "Selection",
                        "target": {
                          "kind": "NamedElmExpr",
                          "name": "c"
                        },
                        "field": "src1"
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "Selection",
                            "target": {
                              "kind": "Selection",
                              "target": {
                                "kind": "NamedElmExpr",
                                "name": "c"
                              },
                              "field": "src2"
                            },
                            "field": "src"
                          },
                          "op": "=",
                          "right": {
                            "kind": "NamedElmExpr",
                            "name": "src"
                          }
                        },
                        "then": {
                          "kind": "Selection",
                          "target": {
                            "kind": "NamedElmExpr",
                            "name": "c"
                          },
                          "field": "src2"
                        },
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "Selection",
                              "target": {
                                "kind": "Selection",
                                "target": {
                                  "kind": "NamedElmExpr",
                                  "name": "c"
                                },
                                "field": "src3"
                              },
                              "field": "src"
                            },
                            "op": "=",
                            "right": {
                              "kind": "NamedElmExpr",
                              "name": "src"
                            }
                          },
                          "then": {
                            "kind": "Selection",
                            "target": {
                              "kind": "NamedElmExpr",
                              "name": "c"
                            },
                            "field": "src3"
                          },
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "BinaryExpr",
                              "left": {
                                "kind": "Selection",
                                "target": {
                                  "kind": "Selection",
                                  "target": {
                                    "kind": "NamedElmExpr",
                                    "name": "c"
                                  },
                                  "field": "src4"
                                },
                                "field": "src"
                              },
                              "op": "=",
                              "right": {
                                "kind": "NamedElmExpr",
                                "name": "src"
                              }
                            },
                            "then": {
                              "kind": "Selection",
                              "target": {
                                "kind": "NamedElmExpr",
                                "name": "c"
                              },
                              "field": "src4"
                            },
                            "else": {
                              "kind": "IfThenElseExpr",
                              "if": {
                                "kind": "BinaryExpr",
                                "left": {
                                  "kind": "Selection",
                                  "target": {
                                    "kind": "Selection",
                                    "target": {
                                      "kind": "NamedElmExpr",
                                      "name": "c"
                                    },
                                    "field": "src5"
                                  },
                                  "field": "src"
                                },
                                "op": "=",
                                "right": {
                                  "kind": "NamedElmExpr",
                                  "name": "src"
                                }
                              },
                              "then": {
                                "kind": "Selection",
                                "target": {
                                  "kind": "NamedElmExpr",
                                  "name": "c"
                                },
                                "field": "src5"
                              },
                              "else": {
                                "kind": "IfThenElseExpr",
                                "if": {
                                  "kind": "BinaryExpr",
                                  "left": {
                                    "kind": "Selection",
                                    "target": {
                                      "kind": "Selection",
                                      "target": {
                                        "kind": "NamedElmExpr",
                                        "name": "c"
                                      },
                                      "field": "src6"
                                    },
                                    "field": "src"
                                  },
                                  "op": "=",
                                  "right": {
                                    "kind": "NamedElmExpr",
                                    "name": "src"
                                  }
                                },
                                "then": {
                                  "kind": "Selection",
                                  "target": {
                                    "kind": "NamedElmExpr",
                                    "name": "c"
                                  },
                                  "field": "src6"
                                },
                                "else": {
                                  "kind": "NamedElmExpr",
                                  "name": "NULL_RECORD"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDef",
                "name": "GET_IDX_BY_NAME",
                "args": [
                  {
                    "name": "src",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "idx",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "c",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCache.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "CallExpr",
                      "function": {
                        "kind": "DoubleDotRef",
                        "name": "CACHE"
                      },
                      "args": [
                        {
                          "kind": "NamedElmExpr",
                          "name": "NULL_CACHE"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "idx",
                        "type": {
                          "kind": "PrimType",
                          "primType": "int"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "Selection",
                          "target": {
                            "kind": "Selection",
                            "target": {
                              "kind": "NamedElmExpr",
                              "name": "c"
                            },
                            "field": "src1"
                          },
                          "field": "src"
                        },
                        "op": "=",
                        "right": {
                          "kind": "NamedElmExpr",
                          "name": "src"
                        }
                      },
                      "then": {
                        "kind": "IntLitExpr",
                        "value": "1"
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "Selection",
                            "target": {
                              "kind": "Selection",
                              "target": {
                                "kind": "NamedElmExpr",
                                "name": "c"
                              },
                              "field": "src2"
                            },
                            "field": "src"
                          },
                          "op": "=",
                          "right": {
                            "kind": "NamedElmExpr",
                            "name": "src"
                          }
                        },
                        "then": {
                          "kind": "IntLitExpr",
                          "value": "2"
                        },
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "Selection",
                              "target": {
                                "kind": "Selection",
                                "target": {
                                  "kind": "NamedElmExpr",
                                  "name": "c"
                                },
                                "field": "src3"
                              },
                              "field": "src"
                            },
                            "op": "=",
                            "right": {
                              "kind": "NamedElmExpr",
                              "name": "src"
                            }
                          },
                          "then": {
                            "kind": "IntLitExpr",
                            "value": "3"
                          },
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "BinaryExpr",
                              "left": {
                                "kind": "Selection",
                                "target": {
                                  "kind": "Selection",
                                  "target": {
                                    "kind": "NamedElmExpr",
                                    "name": "c"
                                  },
                                  "field": "src4"
                                },
                                "field": "src"
                              },
                              "op": "=",
                              "right": {
                                "kind": "NamedElmExpr",
                                "name": "src"
                              }
                            },
                            "then": {
                              "kind": "IntLitExpr",
                              "value": "4"
                            },
                            "else": {
                              "kind": "IfThenElseExpr",
                              "if": {
                                "kind": "BinaryExpr",
                                "left": {
                                  "kind": "Selection",
                                  "target": {
                                    "kind": "Selection",
                                    "target": {
                                      "kind": "NamedElmExpr",
                                      "name": "c"
                                    },
                                    "field": "src5"
                                  },
                                  "field": "src"
                                },
                                "op": "=",
                                "right": {
                                  "kind": "NamedElmExpr",
                                  "name": "src"
                                }
                              },
                              "then": {
                                "kind": "IntLitExpr",
                                "value": "5"
                              },
                              "else": {
                                "kind": "IfThenElseExpr",
                                "if": {
                                  "kind": "BinaryExpr",
                                  "left": {
                                    "kind": "Selection",
                                    "target": {
                                      "kind": "Selection",
                                      "target": {
                                        "kind": "NamedElmExpr",
                                        "name": "c"
                                      },
                                      "field": "src6"
                                    },
                                    "field": "src"
                                  },
                                  "op": "=",
                                  "right": {
                                    "kind": "NamedElmExpr",
                                    "name": "src"
                                  }
                                },
                                "then": {
                                  "kind": "IntLitExpr",
                                  "value": "6"
                                },
                                "else": {
                                  "kind": "IntLitExpr",
                                  "value": "0"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDef",
                "name": "WRITE_CACHE",
                "args": [
                  {
                    "name": "idx",
                    "type": {
                      "kind": "PrimType",
                      "primType": "int"
                    }
                  },
                  {
                    "name": "record",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "CASE_AttestationCacheRecord.Impl"
                    }
                  }
                ],
                "returns": [
                  {
                    "name": "new_cache",
                    "type": {
                      "kind": "DoubleDotRef",
                      "name": "CASE_AttestationCache.Impl"
                    }
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "new_cache",
                        "type": {
                          "kind": "DoubleDotRef",
                          "name": "CASE_AttestationCache.Impl"
                        }
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "NamedElmExpr",
                          "name": "idx"
                        },
                        "op": "=",
                        "right": {
                          "kind": "IntLitExpr",
                          "value": "1"
                        }
                      },
                      "then": {
                        "kind": "CallExpr",
                        "function": {
                          "kind": "DoubleDotRef",
                          "name": "CACHE"
                        },
                        "args": [
                          {
                            "kind": "RecordLitExpr",
                            "recordType": {
                              "kind": "DoubleDotRef",
                              "name": "CASE_AttestationCache.Impl"
                            },
                            "value": {
                              "src1": {
                                "kind": "NamedElmExpr",
                                "name": "record"
                              },
                              "src2": {
                                "kind": "CallExpr",
                                "function": {
                                  "kind": "DoubleDotRef",
                                  "name": "GET_RECORD_BY_IDX"
                                },
                                "args": [
                                  {
                                    "kind": "IntLitExpr",
                                    "value": "2"
                                  }
                                ]
                              },
                              "src3": {
                                "kind": "CallExpr",
                                "function": {
                                  "kind": "DoubleDotRef",
                                  "name": "GET_RECORD_BY_IDX"
                                },
                                "args": [
                                  {
                                    "kind": "IntLitExpr",
                                    "value": "3"
                                  }
                                ]
                              },
                              "src4": {
                                "kind": "CallExpr",
                                "function": {
                                  "kind": "DoubleDotRef",
                                  "name": "GET_RECORD_BY_IDX"
                                },
                                "args": [
                                  {
                                    "kind": "IntLitExpr",
                                    "value": "4"
                                  }
                                ]
                              },
                              "src5": {
                                "kind": "CallExpr",
                                "function": {
                                  "kind": "DoubleDotRef",
                                  "name": "GET_RECORD_BY_IDX"
                                },
                                "args": [
                                  {
                                    "kind": "IntLitExpr",
                                    "value": "5"
                                  }
                                ]
                              },
                              "src6": {
                                "kind": "CallExpr",
                                "function": {
                                  "kind": "DoubleDotRef",
                                  "name": "GET_RECORD_BY_IDX"
                                },
                                "args": [
                                  {
                                    "kind": "IntLitExpr",
                                    "value": "6"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "NamedElmExpr",
                            "name": "idx"
                          },
                          "op": "=",
                          "right": {
                            "kind": "IntLitExpr",
                            "value": "2"
                          }
                        },
                        "then": {
                          "kind": "CallExpr",
                          "function": {
                            "kind": "DoubleDotRef",
                            "name": "CACHE"
                          },
                          "args": [
                            {
                              "kind": "RecordLitExpr",
                              "recordType": {
                                "kind": "DoubleDotRef",
                                "name": "CASE_AttestationCache.Impl"
                              },
                              "value": {
                                "src1": {
                                  "kind": "CallExpr",
                                  "function": {
                                    "kind": "DoubleDotRef",
                                    "name": "GET_RECORD_BY_IDX"
                                  },
                                  "args": [
                                    {
                                      "kind": "IntLitExpr",
                                      "value": "1"
                                    }
                                  ]
                                },
                                "src2": {
                                  "kind": "NamedElmExpr",
                                  "name": "record"
                                },
                                "src3": {
                                  "kind": "CallExpr",
                                  "function": {
                                    "kind": "DoubleDotRef",
                                    "name": "GET_RECORD_BY_IDX"
                                  },
                                  "args": [
                                    {
                                      "kind": "IntLitExpr",
                                      "value": "3"
                                    }
                                  ]
                                },
                                "src4": {
                                  "kind": "CallExpr",
                                  "function": {
                                    "kind": "DoubleDotRef",
                                    "name": "GET_RECORD_BY_IDX"
                                  },
                                  "args": [
                                    {
                                      "kind": "IntLitExpr",
                                      "value": "4"
                                    }
                                  ]
                                },
                                "src5": {
                                  "kind": "CallExpr",
                                  "function": {
                                    "kind": "DoubleDotRef",
                                    "name": "GET_RECORD_BY_IDX"
                                  },
                                  "args": [
                                    {
                                      "kind": "IntLitExpr",
                                      "value": "5"
                                    }
                                  ]
                                },
                                "src6": {
                                  "kind": "CallExpr",
                                  "function": {
                                    "kind": "DoubleDotRef",
                                    "name": "GET_RECORD_BY_IDX"
                                  },
                                  "args": [
                                    {
                                      "kind": "IntLitExpr",
                                      "value": "6"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "NamedElmExpr",
                              "name": "idx"
                            },
                            "op": "=",
                            "right": {
                              "kind": "IntLitExpr",
                              "value": "3"
                            }
                          },
                          "then": {
                            "kind": "CallExpr",
                            "function": {
                              "kind": "DoubleDotRef",
                              "name": "CACHE"
                            },
                            "args": [
                              {
                                "kind": "RecordLitExpr",
                                "recordType": {
                                  "kind": "DoubleDotRef",
                                  "name": "CASE_AttestationCache.Impl"
                                },
                                "value": {
                                  "src1": {
                                    "kind": "CallExpr",
                                    "function": {
                                      "kind": "DoubleDotRef",
                                      "name": "GET_RECORD_BY_IDX"
                                    },
                                    "args": [
                                      {
                                        "kind": "IntLitExpr",
                                        "value": "1"
                                      }
                                    ]
                                  },
                                  "src2": {
                                    "kind": "CallExpr",
                                    "function": {
                                      "kind": "DoubleDotRef",
                                      "name": "GET_RECORD_BY_IDX"
                                    },
                                    "args": [
                                      {
                                        "kind": "IntLitExpr",
                                        "value": "2"
                                      }
                                    ]
                                  },
                                  "src3": {
                                    "kind": "NamedElmExpr",
                                    "name": "record"
                                  },
                                  "src4": {
                                    "kind": "CallExpr",
                                    "function": {
                                      "kind": "DoubleDotRef",
                                      "name": "GET_RECORD_BY_IDX"
                                    },
                                    "args": [
                                      {
                                        "kind": "IntLitExpr",
                                        "value": "4"
                                      }
                                    ]
                                  },
                                  "src5": {
                                    "kind": "CallExpr",
                                    "function": {
                                      "kind": "DoubleDotRef",
                                      "name": "GET_RECORD_BY_IDX"
                                    },
                                    "args": [
                                      {
                                        "kind": "IntLitExpr",
                                        "value": "5"
                                      }
                                    ]
                                  },
                                  "src6": {
                                    "kind": "CallExpr",
                                    "function": {
                                      "kind": "DoubleDotRef",
                                      "name": "GET_RECORD_BY_IDX"
                                    },
                                    "args": [
                                      {
                                        "kind": "IntLitExpr",
                                        "value": "6"
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          },
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "BinaryExpr",
                              "left": {
                                "kind": "NamedElmExpr",
                                "name": "idx"
                              },
                              "op": "=",
                              "right": {
                                "kind": "IntLitExpr",
                                "value": "4"
                              }
                            },
                            "then": {
                              "kind": "CallExpr",
                              "function": {
                                "kind": "DoubleDotRef",
                                "name": "CACHE"
                              },
                              "args": [
                                {
                                  "kind": "RecordLitExpr",
                                  "recordType": {
                                    "kind": "DoubleDotRef",
                                    "name": "CASE_AttestationCache.Impl"
                                  },
                                  "value": {
                                    "src1": {
                                      "kind": "CallExpr",
                                      "function": {
                                        "kind": "DoubleDotRef",
                                        "name": "GET_RECORD_BY_IDX"
                                      },
                                      "args": [
                                        {
                                          "kind": "IntLitExpr",
                                          "value": "1"
                                        }
                                      ]
                                    },
                                    "src2": {
                                      "kind": "CallExpr",
                                      "function": {
                                        "kind": "DoubleDotRef",
                                        "name": "GET_RECORD_BY_IDX"
                                      },
                                      "args": [
                                        {
                                          "kind": "IntLitExpr",
                                          "value": "2"
                                        }
                                      ]
                                    },
                                    "src3": {
                                      "kind": "CallExpr",
                                      "function": {
                                        "kind": "DoubleDotRef",
                                        "name": "GET_RECORD_BY_IDX"
                                      },
                                      "args": [
                                        {
                                          "kind": "IntLitExpr",
                                          "value": "3"
                                        }
                                      ]
                                    },
                                    "src4": {
                                      "kind": "NamedElmExpr",
                                      "name": "record"
                                    },
                                    "src5": {
                                      "kind": "CallExpr",
                                      "function": {
                                        "kind": "DoubleDotRef",
                                        "name": "GET_RECORD_BY_IDX"
                                      },
                                      "args": [
                                        {
                                          "kind": "IntLitExpr",
                                          "value": "5"
                                        }
                                      ]
                                    },
                                    "src6": {
                                      "kind": "CallExpr",
                                      "function": {
                                        "kind": "DoubleDotRef",
                                        "name": "GET_RECORD_BY_IDX"
                                      },
                                      "args": [
                                        {
                                          "kind": "IntLitExpr",
                                          "value": "6"
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            "else": {
                              "kind": "IfThenElseExpr",
                              "if": {
                                "kind": "BinaryExpr",
                                "left": {
                                  "kind": "NamedElmExpr",
                                  "name": "idx"
                                },
                                "op": "=",
                                "right": {
                                  "kind": "IntLitExpr",
                                  "value": "5"
                                }
                              },
                              "then": {
                                "kind": "CallExpr",
                                "function": {
                                  "kind": "DoubleDotRef",
                                  "name": "CACHE"
                                },
                                "args": [
                                  {
                                    "kind": "RecordLitExpr",
                                    "recordType": {
                                      "kind": "DoubleDotRef",
                                      "name": "CASE_AttestationCache.Impl"
                                    },
                                    "value": {
                                      "src1": {
                                        "kind": "CallExpr",
                                        "function": {
                                          "kind": "DoubleDotRef",
                                          "name": "GET_RECORD_BY_IDX"
                                        },
                                        "args": [
                                          {
                                            "kind": "IntLitExpr",
                                            "value": "1"
                                          }
                                        ]
                                      },
                                      "src2": {
                                        "kind": "CallExpr",
                                        "function": {
                                          "kind": "DoubleDotRef",
                                          "name": "GET_RECORD_BY_IDX"
                                        },
                                        "args": [
                                          {
                                            "kind": "IntLitExpr",
                                            "value": "2"
                                          }
                                        ]
                                      },
                                      "src3": {
                                        "kind": "CallExpr",
                                        "function": {
                                          "kind": "DoubleDotRef",
                                          "name": "GET_RECORD_BY_IDX"
                                        },
                                        "args": [
                                          {
                                            "kind": "IntLitExpr",
                                            "value": "3"
                                          }
                                        ]
                                      },
                                      "src4": {
                                        "kind": "CallExpr",
                                        "function": {
                                          "kind": "DoubleDotRef",
                                          "name": "GET_RECORD_BY_IDX"
                                        },
                                        "args": [
                                          {
                                            "kind": "IntLitExpr",
                                            "value": "4"
                                          }
                                        ]
                                      },
                                      "src5": {
                                        "kind": "NamedElmExpr",
                                        "name": "record"
                                      },
                                      "src6": {
                                        "kind": "CallExpr",
                                        "function": {
                                          "kind": "DoubleDotRef",
                                          "name": "GET_RECORD_BY_IDX"
                                        },
                                        "args": [
                                          {
                                            "kind": "IntLitExpr",
                                            "value": "6"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "else": {
                                "kind": "IfThenElseExpr",
                                "if": {
                                  "kind": "BinaryExpr",
                                  "left": {
                                    "kind": "NamedElmExpr",
                                    "name": "idx"
                                  },
                                  "op": "=",
                                  "right": {
                                    "kind": "IntLitExpr",
                                    "value": "6"
                                  }
                                },
                                "then": {
                                  "kind": "CallExpr",
                                  "function": {
                                    "kind": "DoubleDotRef",
                                    "name": "CACHE"
                                  },
                                  "args": [
                                    {
                                      "kind": "RecordLitExpr",
                                      "recordType": {
                                        "kind": "DoubleDotRef",
                                        "name": "CASE_AttestationCache.Impl"
                                      },
                                      "value": {
                                        "src1": {
                                          "kind": "CallExpr",
                                          "function": {
                                            "kind": "DoubleDotRef",
                                            "name": "GET_RECORD_BY_IDX"
                                          },
                                          "args": [
                                            {
                                              "kind": "IntLitExpr",
                                              "value": "1"
                                            }
                                          ]
                                        },
                                        "src2": {
                                          "kind": "CallExpr",
                                          "function": {
                                            "kind": "DoubleDotRef",
                                            "name": "GET_RECORD_BY_IDX"
                                          },
                                          "args": [
                                            {
                                              "kind": "IntLitExpr",
                                              "value": "2"
                                            }
                                          ]
                                        },
                                        "src3": {
                                          "kind": "CallExpr",
                                          "function": {
                                            "kind": "DoubleDotRef",
                                            "name": "GET_RECORD_BY_IDX"
                                          },
                                          "args": [
                                            {
                                              "kind": "IntLitExpr",
                                              "value": "3"
                                            }
                                          ]
                                        },
                                        "src4": {
                                          "kind": "CallExpr",
                                          "function": {
                                            "kind": "DoubleDotRef",
                                            "name": "GET_RECORD_BY_IDX"
                                          },
                                          "args": [
                                            {
                                              "kind": "IntLitExpr",
                                              "value": "4"
                                            }
                                          ]
                                        },
                                        "src5": {
                                          "kind": "CallExpr",
                                          "function": {
                                            "kind": "DoubleDotRef",
                                            "name": "GET_RECORD_BY_IDX"
                                          },
                                          "args": [
                                            {
                                              "kind": "IntLitExpr",
                                              "value": "5"
                                            }
                                          ]
                                        },
                                        "src6": {
                                          "kind": "NamedElmExpr",
                                          "name": "record"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "else": {
                                  "kind": "NamedElmExpr",
                                  "name": "NULL_CACHE"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "Resolute",
          "kind": "AnnexLibrary",
          "sourceText": "{**\n\t\t\n\t\t---------------------------\n\t\t-- MODEL TRANSFORMATIONS --\n\t\t---------------------------\n\t\t\n\t\t-- Top-level claim for proper insertion of a filter\n\t\tadd_filter(c : component, message_type : data) <=\n\t\t\t** \"Filter inserted before \" c **\n\t\t\tfilter_exists(c) and filter_not_bypassed(c, message_type) and filter_prop_checked()\n\t\t\t\n\t\t-- Top-level claim for proper insertion of attestation manager\n\t\tadd_attestation_manager(comm_driver : component, attestation_manager : component) <=\n\t\t\t** \"Attestation Manager added for communications driver \" comm_driver **\n\t\t\tattestation_manager_exists(comm_driver, attestation_manager) and attestation_manager_not_bypassed(comm_driver, attestation_manager) and attestation_manager_prop_checked()\t\t\t\n\t\t\n\t\t-- Top-level claim for proper insertion of a router\n\t\tadd_router(c : component) <=\n\t\t\t** \"Router inserted after \" c **\n\t\t\ttrue\n\t\n\t\t-- Top-level claim for proper insertion of a monitor\n\t\tadd_monitor(c : component) <=\n\t\t\t** \"Monitor inserted on \" c **\n\t\t\ttrue\n\t\t\n\t\t-- Top-level claim for proper insertion of an isolator\n\t\tadd_isolator(c : component) <=\n\t\t\t** \"Isolator added to \" c **\n\t\t\ttrue\t\n\t\t\n\t\t----------------\n\t\t-- SUB CLAIMS --\n\t\t----------------\n\t\n\t\t-- This connects to evidence that AGREE was previously run on the current version of the design.\n\t\tagree_prop_checked(c : component, property_id : string) <=\n\t\t\t** \"AGREE properties passed\" **\n\t\t\tAgreeLib.hasAgreeProperty(c, property_id) and analysis(\"AgreeCheck\")\t\n\t\t\n\t\t-- Ideally, we want to check that there's a filter anywhere between\n\t\t-- pairs of components (such as the ground station and flight planner).\n\t\t-- However, there's a bug in Resolute that prevents us from doing that.\n\t\t-- So for now, we just check to see if there is a filter immediately before \n\t\t-- the component on the communication pathway.\n\t\tfilter_exists(c : component) <=\n\t\t\t** \"A filter exists on the communication pathway immediately before \" c **\n\t\t\t-- get incoming connections\n\t\t\tlet in_conns : {connection} = {conn for (conn : connections(c)) | destination_component(conn) = c};\n\t\t\texists(conn : in_conns). is_filter(source_component(conn))\n\t\n\t\t-- Make sure there is no communication pathway that avoids the filter\n\t    filter_not_bypassed(c : component, message_type : data) <=\n\t\t    ** \"Filter cannot be bypassed\" **\n\t\t\t-- get incoming connections of type Command\n\t\t\tlet cmd_conns : {connection} = {conn for (conn : connections(c)) | \n\t\t\t\t\t\t\t\t\t\t\tdestination_component(conn) = c and has_type(conn) and type(conn) = message_type};\n\t\t\t-- show that all of these connections come from a filter\n\t\t\tforall(conn : cmd_conns). is_filter(source_component(conn))\n\t\n\t    -- This should connect to some evidence that the filter was correctly generated\n\t    -- and that the proof was emitted and checked.\n\t    -- However, this funcionality has not yet been implemented\n\t    filter_prop_checked() <=\n\t\t    ** \"Filter property implemented by CakeML\" **\n\t\t    forall (c : component). is_filter(c)\n\t\t       => has_property(c, CASE_Properties::COMP_IMPL) and property(c, CASE_Properties::COMP_IMPL) = \"CAKEML\"\n\t\t       and filter_proof_checked()\n\t\t       \n\t\t-- Checks if the specified component is a filter\n\t\tis_filter(c : component) : bool =\n\t\t\thas_property(c, CASE_Properties::COMP_TYPE) and property(c, CASE_Properties::COMP_TYPE) = \"FILTER\"\n\t\t\t\n\t\t-- Checks that a proof has been generated showing the filter regular expression\n\t\t-- matches the AGREE contract\n\t\tfilter_proof_checked() <=\n\t\t\t** \"Filter proof checked\" **\n\t\t\tanalysis(\"ToolCheck\", \"SPLAT\")\n\t\t\t\n\t\t-- Evidence that an attestation manager component exists for a given communication driver\n\t\tattestation_manager_exists(comm_driver : component, attestation_manager : component) <=\n\t\t\t** \"An attestation manager on \" comm_driver \" exists\" **\n\t\t\t-- check that the attestation manager only has attestation request/response connections to the comm driver\n\t\t\tlet am : component = instance(attestation_manager);\n\t\t\tlet cd : component = instance(comm_driver);\n\t\t\tlet attestation_conns : {connection} = {conn for (conn : connections(am))};\n\t\t\tis_comm_driver(cd) and is_attestation_manager(am) and\n\t\t\tforall (conn : attestation_conns). \n\t\t\t\t\t(has_type(conn) and name(type(conn)) = \"CASE_AttestationRequestMsg.Impl\") => destination_component(conn) = cd and\n\t\t\t\t\t(has_type(conn) and name(type(conn)) = \"CASE_AttestationResponseMsg.Impl\") => source_component(conn) = cd\n\t\t\t\n\t\t-- Evidence that communication from the comm driver cannot bypass attestation manager\n\t\tattestation_manager_not_bypassed(comm_driver : component, attestation_manager : component) <=\n\t\t\t** \"Attestation Manager cannot be bypassed\" **\n\t\t\t-- all outgoing connections from the comm driver to components inside the \n\t\t\t-- parent of the comm driver all lead to the attestation manager\n\t\t\tlet am : component = instance(attestation_manager);\n\t\t\tlet cd : component = instance(comm_driver);\n\t\t\tlet out_conns : {connection} = {conn for (conn : connections(cd)) | source_component(conn) = cd and not (destination_component(conn) = parent(cd))};\n\t\t\tforall(conn : out_conns). destination_component(conn) = am \n\t\t\t\n\t\t-- This should connect to some evidence that the attestation manager was correctly generated\n\t    -- and that the proof was emitted and checked.\n\t    -- However, this funcionality has not yet been implemented\n\t    attestation_manager_prop_checked() <=\n\t\t    ** \"Attestation Manager property implemented by CakeML\" **\n\t\t    forall (c : component). is_attestation_manager(c)\n\t\t       => has_property(c, CASE_Properties::COMP_IMPL) and property(c, CASE_Properties::COMP_IMPL) = \"CAKEML\"\n\t\t       and attestation_manager_proof_checked()\n\t\t       \n\t\t-- Checks that a proof has been generated showing the attestation manager has been implemented correctly\n\t\tattestation_manager_proof_checked() : bool =\n\t\ttrue\n--\t\t\tanalysis(\"ToolCheck\", \"SPLAT\")\n\t\t\t\n\t\t-- Checks if the specified component is an attestation manager\n\t\tis_attestation_manager(c : component) : bool =\n\t\t\thas_property(c, CASE_Properties::COMP_TYPE) and property(c, CASE_Properties::COMP_TYPE) = \"ATTESTATION\"\n\t\n\t\t-- Checks if the specified component is a communications driver\n\t\tis_comm_driver(c : component) : bool =\n\t\t\thas_property(c, CASE_Properties::COMP_TYPE) and property(c, CASE_Properties::COMP_TYPE) = \"COMM_DRIVER\"\n\t\n\t**}"
        }
      ]
    }
  }
]