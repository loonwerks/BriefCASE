/*
 * Copyright (c) 2021, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.25.0.
 */

package com.collins.trustedsystems.briefcase.json.serializer;

import com.collins.trustedsystems.briefcase.json.json.JsonAnnexArray;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexFalse;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexInteger;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexLibrary;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexMember;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexNull;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexObject;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexReal;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexString;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexSubclause;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexTrue;
import com.collins.trustedsystems.briefcase.json.json.JsonPackage;
import com.collins.trustedsystems.briefcase.json.services.JsonGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.osate.aadl2.Aadl2Package;
import org.osate.aadl2.ArrayRange;
import org.osate.aadl2.BasicPropertyAssociation;
import org.osate.aadl2.BooleanLiteral;
import org.osate.aadl2.ClassifierValue;
import org.osate.aadl2.ComputedValue;
import org.osate.aadl2.ContainedNamedElement;
import org.osate.aadl2.ContainmentPathElement;
import org.osate.aadl2.IntegerLiteral;
import org.osate.aadl2.ListValue;
import org.osate.aadl2.ModalPropertyValue;
import org.osate.aadl2.NamedValue;
import org.osate.aadl2.Operation;
import org.osate.aadl2.PropertyAssociation;
import org.osate.aadl2.RangeValue;
import org.osate.aadl2.RealLiteral;
import org.osate.aadl2.RecordValue;
import org.osate.aadl2.ReferenceValue;
import org.osate.aadl2.StringLiteral;
import org.osate.xtext.aadl2.properties.serializer.PropertiesSemanticSequencer;

@SuppressWarnings("all")
public abstract class AbstractJsonSemanticSequencer extends PropertiesSemanticSequencer {

	@Inject
	private JsonGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Aadl2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Aadl2Package.ARRAY_RANGE:
				sequence_ArrayRange(context, (ArrayRange) semanticObject); 
				return; 
			case Aadl2Package.BASIC_PROPERTY_ASSOCIATION:
				sequence_FieldPropertyAssociation(context, (BasicPropertyAssociation) semanticObject); 
				return; 
			case Aadl2Package.BOOLEAN_LITERAL:
				sequence_BooleanLiteral(context, (BooleanLiteral) semanticObject); 
				return; 
			case Aadl2Package.CLASSIFIER_VALUE:
				sequence_ComponentClassifierTerm(context, (ClassifierValue) semanticObject); 
				return; 
			case Aadl2Package.COMPUTED_VALUE:
				sequence_ComputedTerm(context, (ComputedValue) semanticObject); 
				return; 
			case Aadl2Package.CONTAINED_NAMED_ELEMENT:
				sequence_ContainmentPath(context, (ContainedNamedElement) semanticObject); 
				return; 
			case Aadl2Package.CONTAINMENT_PATH_ELEMENT:
				sequence_ContainmentPathElement(context, (ContainmentPathElement) semanticObject); 
				return; 
			case Aadl2Package.INTEGER_LITERAL:
				sequence_IntegerTerm(context, (IntegerLiteral) semanticObject); 
				return; 
			case Aadl2Package.LIST_VALUE:
				sequence_ListTerm(context, (ListValue) semanticObject); 
				return; 
			case Aadl2Package.MODAL_PROPERTY_VALUE:
				if (rule == grammarAccess.getModalPropertyValueRule()) {
					sequence_ModalPropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOptionalModalPropertyValueRule()) {
					sequence_OptionalModalPropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPropertyValueRule()) {
					sequence_PropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.NAMED_VALUE:
				if (rule == grammarAccess.getConstantValueRule()
						|| rule == grammarAccess.getNumAltRule()) {
					sequence_ConstantValue(context, (NamedValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPropertyExpressionRule()
						|| rule == grammarAccess.getLiteralorReferenceTermRule()) {
					sequence_LiteralorReferenceTerm(context, (NamedValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.OPERATION:
				sequence_SignedConstant(context, (Operation) semanticObject); 
				return; 
			case Aadl2Package.PROPERTY_ASSOCIATION:
				if (rule == grammarAccess.getBasicPropertyAssociationRule()) {
					sequence_BasicPropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPModelRule()
						|| rule == grammarAccess.getContainedPropertyAssociationRule()) {
					sequence_ContainedPropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPropertyAssociationRule()) {
					sequence_PropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.RANGE_VALUE:
				sequence_NumericRangeTerm(context, (RangeValue) semanticObject); 
				return; 
			case Aadl2Package.REAL_LITERAL:
				sequence_RealTerm(context, (RealLiteral) semanticObject); 
				return; 
			case Aadl2Package.RECORD_VALUE:
				if (rule == grammarAccess.getOldRecordTermRule()) {
					sequence_OldRecordTerm(context, (RecordValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPropertyExpressionRule()
						|| rule == grammarAccess.getRecordTermRule()) {
					sequence_RecordTerm(context, (RecordValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.REFERENCE_VALUE:
				sequence_ReferenceTerm(context, (ReferenceValue) semanticObject); 
				return; 
			case Aadl2Package.STRING_LITERAL:
				sequence_StringTerm(context, (StringLiteral) semanticObject); 
				return; 
			}
		else if (epackage == JsonPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonPackage.JSON_ANNEX_ARRAY:
				sequence_JsonAnnexArray(context, (JsonAnnexArray) semanticObject); 
				return; 
			case JsonPackage.JSON_ANNEX_FALSE:
				sequence_JsonAnnexBoolean(context, (JsonAnnexFalse) semanticObject); 
				return; 
			case JsonPackage.JSON_ANNEX_INTEGER:
				sequence_JsonAnnexNumber(context, (JsonAnnexInteger) semanticObject); 
				return; 
			case JsonPackage.JSON_ANNEX_LIBRARY:
				sequence_JsonAnnexLibrary(context, (JsonAnnexLibrary) semanticObject); 
				return; 
			case JsonPackage.JSON_ANNEX_MEMBER:
				sequence_JsonAnnexMember(context, (JsonAnnexMember) semanticObject); 
				return; 
			case JsonPackage.JSON_ANNEX_NULL:
				sequence_JsonAnnexNull(context, (JsonAnnexNull) semanticObject); 
				return; 
			case JsonPackage.JSON_ANNEX_OBJECT:
				sequence_JsonAnnexObject(context, (JsonAnnexObject) semanticObject); 
				return; 
			case JsonPackage.JSON_ANNEX_REAL:
				sequence_JsonAnnexNumber(context, (JsonAnnexReal) semanticObject); 
				return; 
			case JsonPackage.JSON_ANNEX_STRING:
				sequence_JsonAnnexString(context, (JsonAnnexString) semanticObject); 
				return; 
			case JsonPackage.JSON_ANNEX_SUBCLAUSE:
				sequence_JsonAnnexSubclause(context, (JsonAnnexSubclause) semanticObject); 
				return; 
			case JsonPackage.JSON_ANNEX_TRUE:
				sequence_JsonAnnexBoolean(context, (JsonAnnexTrue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     JsonAnnexElement returns JsonAnnexArray
	 *     JsonAnnexArray returns JsonAnnexArray
	 *
	 * Constraint:
	 *     (jsonAnnexElements+=JsonAnnexElement? jsonAnnexElements+=JsonAnnexElement*)
	 */
	protected void sequence_JsonAnnexArray(ISerializationContext context, JsonAnnexArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonAnnexElement returns JsonAnnexFalse
	 *     JsonAnnexBoolean returns JsonAnnexFalse
	 *
	 * Constraint:
	 *     {JsonAnnexFalse}
	 */
	protected void sequence_JsonAnnexBoolean(ISerializationContext context, JsonAnnexFalse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonAnnexElement returns JsonAnnexTrue
	 *     JsonAnnexBoolean returns JsonAnnexTrue
	 *
	 * Constraint:
	 *     {JsonAnnexTrue}
	 */
	protected void sequence_JsonAnnexBoolean(ISerializationContext context, JsonAnnexTrue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnexLibrary returns JsonAnnexLibrary
	 *     JsonAnnexLibrary returns JsonAnnexLibrary
	 *
	 * Constraint:
	 *     jsonAnnexElement=JsonAnnexElement?
	 */
	protected void sequence_JsonAnnexLibrary(ISerializationContext context, JsonAnnexLibrary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonAnnexMember returns JsonAnnexMember
	 *
	 * Constraint:
	 *     (key=JsonAnnexString jsonAnnexElement=JsonAnnexElement)
	 */
	protected void sequence_JsonAnnexMember(ISerializationContext context, JsonAnnexMember semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_ANNEX_MEMBER__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_ANNEX_MEMBER__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_ANNEX_MEMBER__JSON_ANNEX_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_ANNEX_MEMBER__JSON_ANNEX_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonAnnexMemberAccess().getKeyJsonAnnexStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getJsonAnnexMemberAccess().getJsonAnnexElementJsonAnnexElementParserRuleCall_2_0(), semanticObject.getJsonAnnexElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonAnnexElement returns JsonAnnexNull
	 *     JsonAnnexNull returns JsonAnnexNull
	 *
	 * Constraint:
	 *     {JsonAnnexNull}
	 */
	protected void sequence_JsonAnnexNull(ISerializationContext context, JsonAnnexNull semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonAnnexElement returns JsonAnnexInteger
	 *     JsonAnnexNumber returns JsonAnnexInteger
	 *
	 * Constraint:
	 *     value=SignedInteger
	 */
	protected void sequence_JsonAnnexNumber(ISerializationContext context, JsonAnnexInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_ANNEX_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_ANNEX_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonAnnexNumberAccess().getValueSignedIntegerParserRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonAnnexElement returns JsonAnnexReal
	 *     JsonAnnexNumber returns JsonAnnexReal
	 *
	 * Constraint:
	 *     value=SignedReal
	 */
	protected void sequence_JsonAnnexNumber(ISerializationContext context, JsonAnnexReal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_ANNEX_REAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_ANNEX_REAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonAnnexNumberAccess().getValueSignedRealParserRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonAnnexElement returns JsonAnnexObject
	 *     JsonAnnexObject returns JsonAnnexObject
	 *
	 * Constraint:
	 *     (jsonAnnexMembers+=JsonAnnexMember jsonAnnexMembers+=JsonAnnexMember*)?
	 */
	protected void sequence_JsonAnnexObject(ISerializationContext context, JsonAnnexObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonAnnexElement returns JsonAnnexString
	 *     JsonAnnexString returns JsonAnnexString
	 *
	 * Constraint:
	 *     value=JsonString
	 */
	protected void sequence_JsonAnnexString(ISerializationContext context, JsonAnnexString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_ANNEX_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_ANNEX_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonAnnexStringAccess().getValueJsonStringParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AnnexSubclause returns JsonAnnexSubclause
	 *     JsonAnnexSubclause returns JsonAnnexSubclause
	 *
	 * Constraint:
	 *     jsonAnnexElement=JsonAnnexElement?
	 */
	protected void sequence_JsonAnnexSubclause(ISerializationContext context, JsonAnnexSubclause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
