/**
 * generated by Xtext
 */
package com.collins.trustedsystems.briefcase.json.formatting2;

import com.collins.trustedsystems.briefcase.json.json.JsonAnnexArray;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexElement;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexLibrary;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexMember;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexObject;
import com.collins.trustedsystems.briefcase.json.json.JsonAnnexSubclause;
import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.osate.aadl2.ArrayRange;
import org.osate.aadl2.BasicPropertyAssociation;
import org.osate.aadl2.ClassifierValue;
import org.osate.aadl2.ComputedValue;
import org.osate.aadl2.ContainmentPathElement;
import org.osate.aadl2.IntegerLiteral;
import org.osate.aadl2.ListValue;
import org.osate.aadl2.ModalPropertyValue;
import org.osate.aadl2.Operation;
import org.osate.aadl2.RangeValue;
import org.osate.aadl2.RealLiteral;
import org.osate.aadl2.RecordValue;
import org.osate.aadl2.ReferenceValue;
import org.osate.xtext.aadl2.properties.formatting2.PropertiesFormatter;

@SuppressWarnings("all")
public class JsonFormatter extends PropertiesFormatter {
  protected void _format(final JsonAnnexLibrary jsonannexlibrary, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noIndentation();
    };
    document.<JsonAnnexElement>surround(jsonannexlibrary.getJsonAnnexElement(), _function);
    this.format(jsonannexlibrary.getJsonAnnexElement(), document);
  }
  
  protected void _format(final JsonAnnexSubclause jsonannexsubclause, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noIndentation();
    };
    document.<JsonAnnexElement>surround(jsonannexsubclause.getJsonAnnexElement(), _function);
    this.format(jsonannexsubclause.getJsonAnnexElement(), document);
  }
  
  protected void _format(final JsonAnnexObject jsonannexobject, @Extension final IFormattableDocument document) {
    final Consumer<ISemanticRegion> _function = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it_1) -> {
        it_1.newLine();
      };
      document.append(it, _function_1);
    };
    this.textRegionExtensions.regionFor(jsonannexobject).keywords(",").forEach(_function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(jsonannexobject).keyword("{"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(jsonannexobject).keyword("}"), _function_2);
    EList<JsonAnnexMember> _jsonAnnexMembers = jsonannexobject.getJsonAnnexMembers();
    for (final JsonAnnexMember jsonAnnexMembers : _jsonAnnexMembers) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        document.<JsonAnnexMember>surround(jsonAnnexMembers, _function_3);
        this.format(jsonAnnexMembers, document);
      }
    }
  }
  
  protected void _format(final JsonAnnexArray jsonannexarray, @Extension final IFormattableDocument document) {
    final Consumer<ISemanticRegion> _function = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it_1) -> {
        it_1.newLine();
      };
      document.append(it, _function_1);
    };
    this.textRegionExtensions.regionFor(jsonannexarray).keywords(",").forEach(_function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(jsonannexarray).keyword("["), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(jsonannexarray).keyword("]"), _function_2);
    EList<JsonAnnexElement> _jsonAnnexElements = jsonannexarray.getJsonAnnexElements();
    for (final JsonAnnexElement jsonAnnexElements : _jsonAnnexElements) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        document.<JsonAnnexElement>surround(jsonAnnexElements, _function_3);
        this.format(jsonAnnexElements, document);
      }
    }
  }
  
  protected void _format(final JsonAnnexMember jsonannexmember, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(jsonannexmember).keyword(":"), _function);
    this.format(jsonannexmember.getKey(), document);
    this.format(jsonannexmember.getJsonAnnexElement(), document);
  }
  
  public void format(final Object jsonannexsubclause, final IFormattableDocument document) {
    if (jsonannexsubclause instanceof JsonAnnexSubclause) {
      _format((JsonAnnexSubclause)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof IntegerLiteral) {
      _format((IntegerLiteral)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof RealLiteral) {
      _format((RealLiteral)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof JsonAnnexLibrary) {
      _format((JsonAnnexLibrary)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof ClassifierValue) {
      _format((ClassifierValue)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof ComputedValue) {
      _format((ComputedValue)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof ModalPropertyValue) {
      _format((ModalPropertyValue)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof RangeValue) {
      _format((RangeValue)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof RecordValue) {
      _format((RecordValue)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof ReferenceValue) {
      _format((ReferenceValue)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof ListValue) {
      _format((ListValue)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof Operation) {
      _format((Operation)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof XtextResource) {
      _format((XtextResource)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof ArrayRange) {
      _format((ArrayRange)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof BasicPropertyAssociation) {
      _format((BasicPropertyAssociation)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof ContainmentPathElement) {
      _format((ContainmentPathElement)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof JsonAnnexArray) {
      _format((JsonAnnexArray)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof JsonAnnexObject) {
      _format((JsonAnnexObject)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof JsonAnnexMember) {
      _format((JsonAnnexMember)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause instanceof EObject) {
      _format((EObject)jsonannexsubclause, document);
      return;
    } else if (jsonannexsubclause == null) {
      _format((Void)null, document);
      return;
    } else if (jsonannexsubclause != null) {
      _format(jsonannexsubclause, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(jsonannexsubclause, document).toString());
    }
  }
}
