package CASE_Modeling_Guidelines

public
	
	annex resolute {**
			
		ruleset CASE_Tools {
			
			info (print("Linting CASE_Tools ruleset"))
			
			-- Only one processor-bound process can contain thread or thread-group subcomponents
			error (one_process())
			
			-- AADL modes are not currently supported by CASE tools
			warning (modes_ignored())
			-- AADL flows are not currently supported by CASE tools
			warning (flows_ignored())
					
			-- Threads should have the Dispatch_Protocol property specified
			warning (dispatch_protocol_specified())
			-- Threads can only specify a dispatch_protocol property of periodic or sporadic
			error (valid_dispatch_protocol())
			
			-- Integer types must be bounded (cannot use Base_Types::Integer)
			error (bounded_integers())
			-- Float types must be bounded (cannot use Base_Types::Float)
			error (bounded_floats())

			-- Data types should be specified on ports
			warning (data_type_specified())
			-- Subcomponent types should be specified
			warning (subcomponent_type_specified())
			
			-- Array dimensions must be specified
			error (array_dimension())
			-- Arrays can only have one dimension
			error (one_dimensional_arrays())
			-- The array base type should be specified
			warning (array_base_type())
			
			-- Enumeration data components must be non-empty
			error (non_empty_enums())
			
			-- Connections between thread components must be uni-directional
			error (unidirectional_connections())
			
			-- Components bound to a virtual processor may only communicate with components bound to other processors via event data ports
			error (event_data_ports_on_vm())
			
			-- A processor's subcomponents may be ignored
			warning (no_processor_subcomponents())
			
			-- Thread implementations must indicate location of source code or binary
			error (threads_have_source())
			
			-- Ports must be in or out, but not both
			error (unidirectional_ports())
			
			-- All processes must be bound to a processor
			error (processes_bound())
			
			-- All ports should be connected
			warning (ports_connected())
			
		}

	**};
	
private
	
	
	annex resolute {**

		one_process() <=
			** "Only one processor-bound process can contain thread or thread-group subcomponents" **
			let procs : {process} = {p for (p : process) | (exists(pr : processor) . is_bound_to(p, pr)) and size(subcomponents(p)) > 0};
			lint_check_set(procs, size(procs) <= 1)
			
		dispatch_protocol_specified() <=
			** "Threads should have the Dispatch_Protocol property specified" **
			forall (t : thread) . lint_check(t, has_property(t, Dispatch_Protocol))
			
		valid_dispatch_protocol() <=
			** "Threads can only specify a dispatch_protocol property of periodic or sporadic" **
			forall (t : thread) . lint_check(t, has_property(t, Dispatch_Protocol) => 
				(property(t, Dispatch_Protocol) = "Sporadic" or property(t, Dispatch_Protocol) = "Periodic"))
			
		bounded_integers() <=
			** "Integer types must be bounded (cannot use Base_Types::Integer)" **
			forall (a : aadl) . lint_check(a, has_type(a) => not (type(a) = Base_Types::Integer))
			
		bounded_floats() <=
			** "Float types must be bounded (cannot use Base_Types::Float)" **
			forall (a : aadl) . lint_check(a, has_type(a) => not (type(a) = Base_Types::Float))
			
		data_type_specified() <=
			** "Data types should be specified on process, thread, and thread group ports" **
			forall (f : feature) . lint_check(f, (is_data_port(f) and (is_process(containing_component(f)) or is_thread(containing_component(f)) or is_thread_group(containing_component(f)))) => has_type(f))
			
		subcomponent_type_specified() <=
			** "Subcomponent types should be specified" **
			forall (c : component) . forall (s : subcomponents(c)) . lint_check(s, has_type(s))
			
		array_dimension() <=
			** "Array dimensions must be specified" **
			forall (d : data) . lint_check(d, (has_property(d, Data_Representation) and property(d, Data_Representation) = "Array") => has_property(d, Dimension))
			
		one_dimensional_arrays() <=
			** "Arrays can only have one dimension" **
			forall (d : data) . lint_check(d, (has_property(d, Data_Representation) and property(d, Data_Representation) = "Array") => (has_property(d, Dimension) and size(property(d, Dimension)) = 1))
			
		array_base_type() <=
			** "The array base type should be specified" **
			forall (d : data) . lint_check(d, (has_property(d, Data_Representation) and property(d, Data_Representation) = "Array") => has_property(d, Base_Type))
			
		non_empty_enums() <=
			** "Enumeration data components must be non-empty" **
			forall (d : data) . lint_check(d, (has_property(d, Data_Representation) and property(d, Data_Representation) = "Enum") => (has_property(d, Enumerators) and size(property(d, Enumerators)) > 0))
			
		unidirectional_connections() <=
			** "Connections between thread components must be uni-directional" **
			forall (c : connection) . lint_check(c, not is_bidirectional(c) or is_bus_access(c))
			
		event_data_ports_on_vm() <=
			** "Components bound to a virtual processor may only communicate with components bound to other processors via event data ports" **
			let conns : {connection} = {c for (c : connection) | (not is_event_data_port_connection(c)) and diff_proc_binding(c)};
			forall(c : conns)(vp : virtual_processor) . lint_check(source_component(c), not is_bound_to(source_component(c), vp)) and lint_check(destination_component(c), not is_bound_to(destination_component(c), vp))
						
		unidirectional_ports() <=
			** "Ports must be in or out, but not both" **
			forall (f : feature) . lint_check(f, not (direction(f) = "in out"))
		
		processes_bound() <=
			** "All processes must be bound to a processor" **
			forall (p : process) . exists (proc : component) . (is_proc(proc) and lint_check(p, is_bound_to(p, proc)))
			
		ports_connected() <=
			** "All ports should be connected" **
			forall (p : port) . lint_check(p, length(connections(p)) > 0)
			
		diff_proc_binding(c : connection) : bool =
			exists(p1 : component)(p2 : component) . is_proc(p1) and is_proc(p2) and is_bound_to(source_component(c), p1) and is_bound_to(destination_component(c), p2) and not (p1 = p2)
			
		is_proc(p : component) : bool =
			is_processor(p) or is_virtual_processor(p)
			
		no_processor_subcomponents() <=
			** "A processor's subcomponents may be ignored" **
			forall (p : processor) . lint_check(p, size(subcomponents(p)) = 0)
			
		modes_ignored() <=
			** "AADL modes are not currently supported by CASE tools" **
			forall (c : component) . lint_check(c, not has_modes(c))
			
		flows_ignored() <=
			** "AADL flows are not currently supported by CASE tools" **
			forall (c : component) . lint_check(c, not (size(flow_specifications(c)) + size(end_to_end_flows(c)) > 0))
			
		threads_have_source() <=
			** "Thread implementations must indicate location of source code or binary" **
			forall (t : thread) . lint_check(t, has_property(t, Source_Text))
		
	**};
	
end CASE_Modeling_Guidelines;