property set CASE_Properties is

	-- CASE MODEL TRANSFORMATION TYPE
	COMP_TYPE: enumeration (FILTER, ATTESTATION, MONITOR, VIRTUAL_MACHINE, COMM_DRIVER, SWITCH, SAFETY_CONTROLLER) applies to (system, process, thread, device, abstract, virtual processor);
	-- IMPLEMENTATION LANGUAGE OF THIS COMPONENT (eg CakeML)
	COMP_IMPL: aadlstring applies to (system, process, thread, abstract);
	-- ID OF THE AGREE CONTRACT THAT SPECIFIES THIS COMPONENT
	COMP_SPEC: list of aadlstring applies to (system, process, thread, abstract);
	
	-- REMOTE ATTESTATION
	CACHE_TIMEOUT: aadlinteger applies to (system, process, thread, device, abstract);
	CACHE_SIZE: aadlinteger applies to (system, process, thread, device, abstract);
	
	-- COMMUNICATION MODALITY
	COMM_MODALITY: enumeration (RF, WIFI, WIRED_ETHERNET, SERIAL, BT) applies to (bus);

	-- Runtime
	OS: aadlstring applies to (processor, virtual processor);

--TO DO:  Need additional pattern types such as clearing keys or erasing the directory of a file system
	-- A system has the potential to have multiple subcomponents that require to be zeroized,
	-- each with different hold up and pattern requirements to accomplish the sanitization of memory in a device
	Zeroize_Pattern_Type : type enumeration (overwrite_zeros, NIST_800_88_clear, NIST_800_88_purge, other);

	Zeroize_Enabled_Type : type record (
   		Holdup_Required  : time;
   		Zeroize_Pattern : CASE_Properties::Zeroize_Pattern_Type;
   		Implemented : aadlboolean;);

	Element_Zeroized : CASE_Properties::Zeroize_Enabled_Type applies to (memory, system, processor, device);
	
	-- BOUNDARY INDICATIONS
	
	-- BOUNDARY is deprecated (see TRUST_BOUNDARY and SECURITY_PERIMETER)
	BOUNDARY: list of enumeration(TRUSTED, SECURE, PHYSICAL, UNCONTROLLED) applies to (system, abstract, thread, thread group, process, sub program, sub program group, processor, virtual processor, memory, bus, virtual bus, device);
	
	--Apply the trust boundary at the edge a system, device, or process should treat as 
	--having an untrusted system, device, or process interfacing to it.  A trust boundary
	--may or may not align with the security perimeter.  The security perimeter defines
	--the physical security boundaries of the system
	TRUST_BOUNDARY: aadlboolean applies to (system, abstract, thread, thread group, process, sub program, sub program group, processor, virtual processor, memory, bus, virtual bus, device, data);
	SECURITY_PERIMETER: aadlboolean applies to (system, abstract, thread, thread group, process, sub program, sub program group, processor, virtual processor, memory, bus, virtual bus, device, data);
	
	-- CIA
	CONFIDENTIALITY: enumeration (HIGH, MEDIUM, LOW) applies to (system, process, thread, device, abstract, virtual processor);
	INTEGRITY: enumeration (HIGH, MEDIUM, LOW) applies to (system, process, thread, device, abstract, virtual processor);
	AVAILABILITY: enumeration (HIGH, MEDIUM, LOW) applies to  (system, process, thread, device, abstract, virtual processor);

--	--IDENTIFICATION OF ASSET BEING PROTECTED
--	--Identification of components requiring or providing protection
	Protection_Level_Type : type enumeration (MINIMAL, NOMINAL, ROBUST);
	Protection_Type : type enumeration (INFOSEC, PHYS_ACCESS, TECHNOLOGY);
	Protection_Tactic_Type: type enumeration (DESTRUCTIVE, ENCRYPTION, MILS_SEPARATION, MLS_SEPARATION,GUARD,other);
		
	Asset_Record_Type : type record (
		Asset : reference (system, device, process, bus, processor, memory);
		Asset_Name : aadlstring;
		Protection_Level : CASE_Properties::Protection_Level_Type;
		Protection : CASE_Properties::Protection_Type;
		Protection_Tactic: CASE_Properties::Protection_Tactic_Type;
		Classified: aadlboolean;);

--TO DO:  decide if a list of assets is needed
	Asset_List : list of CASE_Properties::Asset_Record_Type applies to (system, device, process, bus);
	Asset_Description : CASE_Properties::Asset_Record_Type applies to (system, device, process, bus);

	--DEPENDENCIES on the underlying system in support of a function
	Data_Classification_Type : type enumeration (Top_Secret, Secret, Confidential, FOUO, Time_Sensitive);
	Dependencies_Type : type record (
		Data_Handling : CASE_Properties::Data_Classification_Type;
		Classified_Processing : aadlboolean;
	);
	
	Dependencies : CASE_Properties::Dependencies_Type applies to (process, thread);
	
	STPA_Flow_Type : type enumeration (Control_Action, Feedback);
	
	STPA_Flow : type record (
		STPA_Flow_Ref : reference (flow, end to end flow);
		STPA_Type : CASE_Properties::STPA_Flow_Type;
		STPA_Hazard_Name : aadlstring;);

	STPA_Flow_Description : CASE_Properties::STPA_Flow applies to (end to end flow, flow);	

end CASE_Properties;